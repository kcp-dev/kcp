/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package fake

import (
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/discovery"
	client "k8s.io/client-go/kubernetes"
	clientscheme "k8s.io/client-go/kubernetes/scheme"
	admissionregistrationv1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1"
	admissionregistrationv1alpha1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	admissionregistrationv1beta1 "k8s.io/client-go/kubernetes/typed/admissionregistration/v1beta1"
	internalv1alpha1 "k8s.io/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	appsv1 "k8s.io/client-go/kubernetes/typed/apps/v1"
	appsv1beta1 "k8s.io/client-go/kubernetes/typed/apps/v1beta1"
	appsv1beta2 "k8s.io/client-go/kubernetes/typed/apps/v1beta2"
	authenticationv1 "k8s.io/client-go/kubernetes/typed/authentication/v1"
	authenticationv1alpha1 "k8s.io/client-go/kubernetes/typed/authentication/v1alpha1"
	authenticationv1beta1 "k8s.io/client-go/kubernetes/typed/authentication/v1beta1"
	authorizationv1 "k8s.io/client-go/kubernetes/typed/authorization/v1"
	authorizationv1beta1 "k8s.io/client-go/kubernetes/typed/authorization/v1beta1"
	autoscalingv1 "k8s.io/client-go/kubernetes/typed/autoscaling/v1"
	autoscalingv2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2"
	autoscalingv2beta1 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta1"
	autoscalingv2beta2 "k8s.io/client-go/kubernetes/typed/autoscaling/v2beta2"
	batchv1 "k8s.io/client-go/kubernetes/typed/batch/v1"
	batchv1beta1 "k8s.io/client-go/kubernetes/typed/batch/v1beta1"
	certificatesv1 "k8s.io/client-go/kubernetes/typed/certificates/v1"
	certificatesv1alpha1 "k8s.io/client-go/kubernetes/typed/certificates/v1alpha1"
	certificatesv1beta1 "k8s.io/client-go/kubernetes/typed/certificates/v1beta1"
	coordinationv1 "k8s.io/client-go/kubernetes/typed/coordination/v1"
	coordinationv1alpha2 "k8s.io/client-go/kubernetes/typed/coordination/v1alpha2"
	coordinationv1beta1 "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"
	corev1 "k8s.io/client-go/kubernetes/typed/core/v1"
	discoveryv1 "k8s.io/client-go/kubernetes/typed/discovery/v1"
	discoveryv1beta1 "k8s.io/client-go/kubernetes/typed/discovery/v1beta1"
	eventsv1 "k8s.io/client-go/kubernetes/typed/events/v1"
	eventsv1beta1 "k8s.io/client-go/kubernetes/typed/events/v1beta1"
	extensionsv1beta1 "k8s.io/client-go/kubernetes/typed/extensions/v1beta1"
	flowcontrolv1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1"
	flowcontrolv1beta1 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta1"
	flowcontrolv1beta2 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta2"
	flowcontrolv1beta3 "k8s.io/client-go/kubernetes/typed/flowcontrol/v1beta3"
	networkingv1 "k8s.io/client-go/kubernetes/typed/networking/v1"
	networkingv1alpha1 "k8s.io/client-go/kubernetes/typed/networking/v1alpha1"
	networkingv1beta1 "k8s.io/client-go/kubernetes/typed/networking/v1beta1"
	nodev1 "k8s.io/client-go/kubernetes/typed/node/v1"
	nodev1alpha1 "k8s.io/client-go/kubernetes/typed/node/v1alpha1"
	nodev1beta1 "k8s.io/client-go/kubernetes/typed/node/v1beta1"
	policyv1 "k8s.io/client-go/kubernetes/typed/policy/v1"
	policyv1beta1 "k8s.io/client-go/kubernetes/typed/policy/v1beta1"
	rbacv1 "k8s.io/client-go/kubernetes/typed/rbac/v1"
	rbacv1alpha1 "k8s.io/client-go/kubernetes/typed/rbac/v1alpha1"
	rbacv1beta1 "k8s.io/client-go/kubernetes/typed/rbac/v1beta1"
	resourcev1alpha3 "k8s.io/client-go/kubernetes/typed/resource/v1alpha3"
	resourcev1beta1 "k8s.io/client-go/kubernetes/typed/resource/v1beta1"
	schedulingv1 "k8s.io/client-go/kubernetes/typed/scheduling/v1"
	schedulingv1alpha1 "k8s.io/client-go/kubernetes/typed/scheduling/v1alpha1"
	schedulingv1beta1 "k8s.io/client-go/kubernetes/typed/scheduling/v1beta1"
	storagev1 "k8s.io/client-go/kubernetes/typed/storage/v1"
	storagev1alpha1 "k8s.io/client-go/kubernetes/typed/storage/v1alpha1"
	storagev1beta1 "k8s.io/client-go/kubernetes/typed/storage/v1beta1"
	storagemigrationv1alpha1 "k8s.io/client-go/kubernetes/typed/storagemigration/v1alpha1"

	kcpclient "github.com/kcp-dev/client-go/kubernetes"
	kcpadmissionregistrationv1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1"
	fakeadmissionregistrationv1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1/fake"
	kcpadmissionregistrationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1alpha1"
	fakeadmissionregistrationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1alpha1/fake"
	kcpadmissionregistrationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1beta1"
	fakeadmissionregistrationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/admissionregistration/v1beta1/fake"
	kcpinternalv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/apiserverinternal/v1alpha1"
	fakeinternalv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/apiserverinternal/v1alpha1/fake"
	kcpappsv1 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1"
	fakeappsv1 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1/fake"
	kcpappsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1beta1"
	fakeappsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1beta1/fake"
	kcpappsv1beta2 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1beta2"
	fakeappsv1beta2 "github.com/kcp-dev/client-go/kubernetes/typed/apps/v1beta2/fake"
	kcpauthenticationv1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1"
	fakeauthenticationv1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1/fake"
	kcpauthenticationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1alpha1"
	fakeauthenticationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1alpha1/fake"
	kcpauthenticationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1beta1"
	fakeauthenticationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/authentication/v1beta1/fake"
	kcpauthorizationv1 "github.com/kcp-dev/client-go/kubernetes/typed/authorization/v1"
	fakeauthorizationv1 "github.com/kcp-dev/client-go/kubernetes/typed/authorization/v1/fake"
	kcpauthorizationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/authorization/v1beta1"
	fakeauthorizationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/authorization/v1beta1/fake"
	kcpautoscalingv1 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v1"
	fakeautoscalingv1 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v1/fake"
	kcpautoscalingv2 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2"
	fakeautoscalingv2 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2/fake"
	kcpautoscalingv2beta1 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2beta1"
	fakeautoscalingv2beta1 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2beta1/fake"
	kcpautoscalingv2beta2 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2beta2"
	fakeautoscalingv2beta2 "github.com/kcp-dev/client-go/kubernetes/typed/autoscaling/v2beta2/fake"
	kcpbatchv1 "github.com/kcp-dev/client-go/kubernetes/typed/batch/v1"
	fakebatchv1 "github.com/kcp-dev/client-go/kubernetes/typed/batch/v1/fake"
	kcpbatchv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/batch/v1beta1"
	fakebatchv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/batch/v1beta1/fake"
	kcpcertificatesv1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1"
	fakecertificatesv1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1/fake"
	kcpcertificatesv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1alpha1"
	fakecertificatesv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1alpha1/fake"
	kcpcertificatesv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1beta1"
	fakecertificatesv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/certificates/v1beta1/fake"
	kcpcoordinationv1 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1"
	fakecoordinationv1 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1/fake"
	kcpcoordinationv1alpha2 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1alpha2"
	fakecoordinationv1alpha2 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1alpha2/fake"
	kcpcoordinationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1beta1"
	fakecoordinationv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/coordination/v1beta1/fake"
	kcpcorev1 "github.com/kcp-dev/client-go/kubernetes/typed/core/v1"
	fakecorev1 "github.com/kcp-dev/client-go/kubernetes/typed/core/v1/fake"
	kcpdiscoveryv1 "github.com/kcp-dev/client-go/kubernetes/typed/discovery/v1"
	fakediscoveryv1 "github.com/kcp-dev/client-go/kubernetes/typed/discovery/v1/fake"
	kcpdiscoveryv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/discovery/v1beta1"
	fakediscoveryv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/discovery/v1beta1/fake"
	kcpeventsv1 "github.com/kcp-dev/client-go/kubernetes/typed/events/v1"
	fakeeventsv1 "github.com/kcp-dev/client-go/kubernetes/typed/events/v1/fake"
	kcpeventsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/events/v1beta1"
	fakeeventsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/events/v1beta1/fake"
	kcpextensionsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/extensions/v1beta1"
	fakeextensionsv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/extensions/v1beta1/fake"
	kcpflowcontrolv1 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1"
	fakeflowcontrolv1 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1/fake"
	kcpflowcontrolv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta1"
	fakeflowcontrolv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta1/fake"
	kcpflowcontrolv1beta2 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta2"
	fakeflowcontrolv1beta2 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta2/fake"
	kcpflowcontrolv1beta3 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta3"
	fakeflowcontrolv1beta3 "github.com/kcp-dev/client-go/kubernetes/typed/flowcontrol/v1beta3/fake"
	kcpnetworkingv1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1"
	fakenetworkingv1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1/fake"
	kcpnetworkingv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1alpha1"
	fakenetworkingv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1alpha1/fake"
	kcpnetworkingv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1beta1"
	fakenetworkingv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/networking/v1beta1/fake"
	kcpnodev1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1"
	fakenodev1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1/fake"
	kcpnodev1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1alpha1"
	fakenodev1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1alpha1/fake"
	kcpnodev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1beta1"
	fakenodev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/node/v1beta1/fake"
	kcppolicyv1 "github.com/kcp-dev/client-go/kubernetes/typed/policy/v1"
	fakepolicyv1 "github.com/kcp-dev/client-go/kubernetes/typed/policy/v1/fake"
	kcppolicyv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/policy/v1beta1"
	fakepolicyv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/policy/v1beta1/fake"
	kcprbacv1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1"
	fakerbacv1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1/fake"
	kcprbacv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1alpha1"
	fakerbacv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1alpha1/fake"
	kcprbacv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1beta1"
	fakerbacv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/rbac/v1beta1/fake"
	kcpresourcev1alpha3 "github.com/kcp-dev/client-go/kubernetes/typed/resource/v1alpha3"
	fakeresourcev1alpha3 "github.com/kcp-dev/client-go/kubernetes/typed/resource/v1alpha3/fake"
	kcpresourcev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/resource/v1beta1"
	fakeresourcev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/resource/v1beta1/fake"
	kcpschedulingv1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1"
	fakeschedulingv1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1/fake"
	kcpschedulingv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1alpha1"
	fakeschedulingv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1alpha1/fake"
	kcpschedulingv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1beta1"
	fakeschedulingv1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/scheduling/v1beta1/fake"
	kcpstoragev1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1"
	fakestoragev1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1/fake"
	kcpstoragev1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1alpha1"
	fakestoragev1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1alpha1/fake"
	kcpstoragev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1beta1"
	fakestoragev1beta1 "github.com/kcp-dev/client-go/kubernetes/typed/storage/v1beta1/fake"
	kcpstoragemigrationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/storagemigration/v1alpha1"
	fakestoragemigrationv1alpha1 "github.com/kcp-dev/client-go/kubernetes/typed/storagemigration/v1alpha1/fake"
	kcpfakediscovery "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/discovery/fake"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *ClusterClientset {
	o := kcptesting.NewObjectTracker(clientscheme.Scheme, clientscheme.Codecs.UniversalDecoder())
	o.AddAll(objects...)

	cs := &ClusterClientset{Fake: &kcptesting.Fake{}, tracker: o}
	cs.discovery = &kcpfakediscovery.FakeDiscovery{Fake: cs.Fake, ClusterPath: logicalcluster.Wildcard}
	cs.AddReactor("*", "*", kcptesting.ObjectReaction(o))
	cs.AddWatchReactor("*", kcptesting.WatchReaction(o))

	return cs
}

var _ kcpclient.ClusterInterface = (*ClusterClientset)(nil)

// ClusterClientset contains the clients for groups.
type ClusterClientset struct {
	*kcptesting.Fake
	discovery *kcpfakediscovery.FakeDiscovery
	tracker   kcptesting.ObjectTracker
}

// Discovery retrieves the DiscoveryClient
func (c *ClusterClientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *ClusterClientset) Tracker() kcptesting.ObjectTracker {
	return c.tracker
}

// AdmissionregistrationV1 retrieves the AdmissionregistrationV1ClusterClient.
func (c *ClusterClientset) AdmissionregistrationV1() kcpadmissionregistrationv1.AdmissionregistrationV1ClusterInterface {
	return &fakeadmissionregistrationv1.AdmissionregistrationV1ClusterClient{Fake: c.Fake}
}

// AdmissionregistrationV1alpha1 retrieves the AdmissionregistrationV1alpha1ClusterClient.
func (c *ClusterClientset) AdmissionregistrationV1alpha1() kcpadmissionregistrationv1alpha1.AdmissionregistrationV1alpha1ClusterInterface {
	return &fakeadmissionregistrationv1alpha1.AdmissionregistrationV1alpha1ClusterClient{Fake: c.Fake}
}

// AdmissionregistrationV1beta1 retrieves the AdmissionregistrationV1beta1ClusterClient.
func (c *ClusterClientset) AdmissionregistrationV1beta1() kcpadmissionregistrationv1beta1.AdmissionregistrationV1beta1ClusterInterface {
	return &fakeadmissionregistrationv1beta1.AdmissionregistrationV1beta1ClusterClient{Fake: c.Fake}
}

// AppsV1 retrieves the AppsV1ClusterClient.
func (c *ClusterClientset) AppsV1() kcpappsv1.AppsV1ClusterInterface {
	return &fakeappsv1.AppsV1ClusterClient{Fake: c.Fake}
}

// AppsV1beta1 retrieves the AppsV1beta1ClusterClient.
func (c *ClusterClientset) AppsV1beta1() kcpappsv1beta1.AppsV1beta1ClusterInterface {
	return &fakeappsv1beta1.AppsV1beta1ClusterClient{Fake: c.Fake}
}

// AppsV1beta2 retrieves the AppsV1beta2ClusterClient.
func (c *ClusterClientset) AppsV1beta2() kcpappsv1beta2.AppsV1beta2ClusterInterface {
	return &fakeappsv1beta2.AppsV1beta2ClusterClient{Fake: c.Fake}
}

// AuthenticationV1 retrieves the AuthenticationV1ClusterClient.
func (c *ClusterClientset) AuthenticationV1() kcpauthenticationv1.AuthenticationV1ClusterInterface {
	return &fakeauthenticationv1.AuthenticationV1ClusterClient{Fake: c.Fake}
}

// AuthenticationV1alpha1 retrieves the AuthenticationV1alpha1ClusterClient.
func (c *ClusterClientset) AuthenticationV1alpha1() kcpauthenticationv1alpha1.AuthenticationV1alpha1ClusterInterface {
	return &fakeauthenticationv1alpha1.AuthenticationV1alpha1ClusterClient{Fake: c.Fake}
}

// AuthenticationV1beta1 retrieves the AuthenticationV1beta1ClusterClient.
func (c *ClusterClientset) AuthenticationV1beta1() kcpauthenticationv1beta1.AuthenticationV1beta1ClusterInterface {
	return &fakeauthenticationv1beta1.AuthenticationV1beta1ClusterClient{Fake: c.Fake}
}

// AuthorizationV1 retrieves the AuthorizationV1ClusterClient.
func (c *ClusterClientset) AuthorizationV1() kcpauthorizationv1.AuthorizationV1ClusterInterface {
	return &fakeauthorizationv1.AuthorizationV1ClusterClient{Fake: c.Fake}
}

// AuthorizationV1beta1 retrieves the AuthorizationV1beta1ClusterClient.
func (c *ClusterClientset) AuthorizationV1beta1() kcpauthorizationv1beta1.AuthorizationV1beta1ClusterInterface {
	return &fakeauthorizationv1beta1.AuthorizationV1beta1ClusterClient{Fake: c.Fake}
}

// AutoscalingV1 retrieves the AutoscalingV1ClusterClient.
func (c *ClusterClientset) AutoscalingV1() kcpautoscalingv1.AutoscalingV1ClusterInterface {
	return &fakeautoscalingv1.AutoscalingV1ClusterClient{Fake: c.Fake}
}

// AutoscalingV2 retrieves the AutoscalingV2ClusterClient.
func (c *ClusterClientset) AutoscalingV2() kcpautoscalingv2.AutoscalingV2ClusterInterface {
	return &fakeautoscalingv2.AutoscalingV2ClusterClient{Fake: c.Fake}
}

// AutoscalingV2beta1 retrieves the AutoscalingV2beta1ClusterClient.
func (c *ClusterClientset) AutoscalingV2beta1() kcpautoscalingv2beta1.AutoscalingV2beta1ClusterInterface {
	return &fakeautoscalingv2beta1.AutoscalingV2beta1ClusterClient{Fake: c.Fake}
}

// AutoscalingV2beta2 retrieves the AutoscalingV2beta2ClusterClient.
func (c *ClusterClientset) AutoscalingV2beta2() kcpautoscalingv2beta2.AutoscalingV2beta2ClusterInterface {
	return &fakeautoscalingv2beta2.AutoscalingV2beta2ClusterClient{Fake: c.Fake}
}

// BatchV1 retrieves the BatchV1ClusterClient.
func (c *ClusterClientset) BatchV1() kcpbatchv1.BatchV1ClusterInterface {
	return &fakebatchv1.BatchV1ClusterClient{Fake: c.Fake}
}

// BatchV1beta1 retrieves the BatchV1beta1ClusterClient.
func (c *ClusterClientset) BatchV1beta1() kcpbatchv1beta1.BatchV1beta1ClusterInterface {
	return &fakebatchv1beta1.BatchV1beta1ClusterClient{Fake: c.Fake}
}

// CertificatesV1 retrieves the CertificatesV1ClusterClient.
func (c *ClusterClientset) CertificatesV1() kcpcertificatesv1.CertificatesV1ClusterInterface {
	return &fakecertificatesv1.CertificatesV1ClusterClient{Fake: c.Fake}
}

// CertificatesV1alpha1 retrieves the CertificatesV1alpha1ClusterClient.
func (c *ClusterClientset) CertificatesV1alpha1() kcpcertificatesv1alpha1.CertificatesV1alpha1ClusterInterface {
	return &fakecertificatesv1alpha1.CertificatesV1alpha1ClusterClient{Fake: c.Fake}
}

// CertificatesV1beta1 retrieves the CertificatesV1beta1ClusterClient.
func (c *ClusterClientset) CertificatesV1beta1() kcpcertificatesv1beta1.CertificatesV1beta1ClusterInterface {
	return &fakecertificatesv1beta1.CertificatesV1beta1ClusterClient{Fake: c.Fake}
}

// CoordinationV1 retrieves the CoordinationV1ClusterClient.
func (c *ClusterClientset) CoordinationV1() kcpcoordinationv1.CoordinationV1ClusterInterface {
	return &fakecoordinationv1.CoordinationV1ClusterClient{Fake: c.Fake}
}

// CoordinationV1alpha2 retrieves the CoordinationV1alpha2ClusterClient.
func (c *ClusterClientset) CoordinationV1alpha2() kcpcoordinationv1alpha2.CoordinationV1alpha2ClusterInterface {
	return &fakecoordinationv1alpha2.CoordinationV1alpha2ClusterClient{Fake: c.Fake}
}

// CoordinationV1beta1 retrieves the CoordinationV1beta1ClusterClient.
func (c *ClusterClientset) CoordinationV1beta1() kcpcoordinationv1beta1.CoordinationV1beta1ClusterInterface {
	return &fakecoordinationv1beta1.CoordinationV1beta1ClusterClient{Fake: c.Fake}
}

// CoreV1 retrieves the CoreV1ClusterClient.
func (c *ClusterClientset) CoreV1() kcpcorev1.CoreV1ClusterInterface {
	return &fakecorev1.CoreV1ClusterClient{Fake: c.Fake}
}

// DiscoveryV1 retrieves the DiscoveryV1ClusterClient.
func (c *ClusterClientset) DiscoveryV1() kcpdiscoveryv1.DiscoveryV1ClusterInterface {
	return &fakediscoveryv1.DiscoveryV1ClusterClient{Fake: c.Fake}
}

// DiscoveryV1beta1 retrieves the DiscoveryV1beta1ClusterClient.
func (c *ClusterClientset) DiscoveryV1beta1() kcpdiscoveryv1beta1.DiscoveryV1beta1ClusterInterface {
	return &fakediscoveryv1beta1.DiscoveryV1beta1ClusterClient{Fake: c.Fake}
}

// EventsV1 retrieves the EventsV1ClusterClient.
func (c *ClusterClientset) EventsV1() kcpeventsv1.EventsV1ClusterInterface {
	return &fakeeventsv1.EventsV1ClusterClient{Fake: c.Fake}
}

// EventsV1beta1 retrieves the EventsV1beta1ClusterClient.
func (c *ClusterClientset) EventsV1beta1() kcpeventsv1beta1.EventsV1beta1ClusterInterface {
	return &fakeeventsv1beta1.EventsV1beta1ClusterClient{Fake: c.Fake}
}

// ExtensionsV1beta1 retrieves the ExtensionsV1beta1ClusterClient.
func (c *ClusterClientset) ExtensionsV1beta1() kcpextensionsv1beta1.ExtensionsV1beta1ClusterInterface {
	return &fakeextensionsv1beta1.ExtensionsV1beta1ClusterClient{Fake: c.Fake}
}

// FlowcontrolV1 retrieves the FlowcontrolV1ClusterClient.
func (c *ClusterClientset) FlowcontrolV1() kcpflowcontrolv1.FlowcontrolV1ClusterInterface {
	return &fakeflowcontrolv1.FlowcontrolV1ClusterClient{Fake: c.Fake}
}

// FlowcontrolV1beta1 retrieves the FlowcontrolV1beta1ClusterClient.
func (c *ClusterClientset) FlowcontrolV1beta1() kcpflowcontrolv1beta1.FlowcontrolV1beta1ClusterInterface {
	return &fakeflowcontrolv1beta1.FlowcontrolV1beta1ClusterClient{Fake: c.Fake}
}

// FlowcontrolV1beta2 retrieves the FlowcontrolV1beta2ClusterClient.
func (c *ClusterClientset) FlowcontrolV1beta2() kcpflowcontrolv1beta2.FlowcontrolV1beta2ClusterInterface {
	return &fakeflowcontrolv1beta2.FlowcontrolV1beta2ClusterClient{Fake: c.Fake}
}

// FlowcontrolV1beta3 retrieves the FlowcontrolV1beta3ClusterClient.
func (c *ClusterClientset) FlowcontrolV1beta3() kcpflowcontrolv1beta3.FlowcontrolV1beta3ClusterInterface {
	return &fakeflowcontrolv1beta3.FlowcontrolV1beta3ClusterClient{Fake: c.Fake}
}

// InternalV1alpha1 retrieves the InternalV1alpha1ClusterClient.
func (c *ClusterClientset) InternalV1alpha1() kcpinternalv1alpha1.InternalV1alpha1ClusterInterface {
	return &fakeinternalv1alpha1.InternalV1alpha1ClusterClient{Fake: c.Fake}
}

// NetworkingV1 retrieves the NetworkingV1ClusterClient.
func (c *ClusterClientset) NetworkingV1() kcpnetworkingv1.NetworkingV1ClusterInterface {
	return &fakenetworkingv1.NetworkingV1ClusterClient{Fake: c.Fake}
}

// NetworkingV1alpha1 retrieves the NetworkingV1alpha1ClusterClient.
func (c *ClusterClientset) NetworkingV1alpha1() kcpnetworkingv1alpha1.NetworkingV1alpha1ClusterInterface {
	return &fakenetworkingv1alpha1.NetworkingV1alpha1ClusterClient{Fake: c.Fake}
}

// NetworkingV1beta1 retrieves the NetworkingV1beta1ClusterClient.
func (c *ClusterClientset) NetworkingV1beta1() kcpnetworkingv1beta1.NetworkingV1beta1ClusterInterface {
	return &fakenetworkingv1beta1.NetworkingV1beta1ClusterClient{Fake: c.Fake}
}

// NodeV1 retrieves the NodeV1ClusterClient.
func (c *ClusterClientset) NodeV1() kcpnodev1.NodeV1ClusterInterface {
	return &fakenodev1.NodeV1ClusterClient{Fake: c.Fake}
}

// NodeV1alpha1 retrieves the NodeV1alpha1ClusterClient.
func (c *ClusterClientset) NodeV1alpha1() kcpnodev1alpha1.NodeV1alpha1ClusterInterface {
	return &fakenodev1alpha1.NodeV1alpha1ClusterClient{Fake: c.Fake}
}

// NodeV1beta1 retrieves the NodeV1beta1ClusterClient.
func (c *ClusterClientset) NodeV1beta1() kcpnodev1beta1.NodeV1beta1ClusterInterface {
	return &fakenodev1beta1.NodeV1beta1ClusterClient{Fake: c.Fake}
}

// PolicyV1 retrieves the PolicyV1ClusterClient.
func (c *ClusterClientset) PolicyV1() kcppolicyv1.PolicyV1ClusterInterface {
	return &fakepolicyv1.PolicyV1ClusterClient{Fake: c.Fake}
}

// PolicyV1beta1 retrieves the PolicyV1beta1ClusterClient.
func (c *ClusterClientset) PolicyV1beta1() kcppolicyv1beta1.PolicyV1beta1ClusterInterface {
	return &fakepolicyv1beta1.PolicyV1beta1ClusterClient{Fake: c.Fake}
}

// RbacV1 retrieves the RbacV1ClusterClient.
func (c *ClusterClientset) RbacV1() kcprbacv1.RbacV1ClusterInterface {
	return &fakerbacv1.RbacV1ClusterClient{Fake: c.Fake}
}

// RbacV1alpha1 retrieves the RbacV1alpha1ClusterClient.
func (c *ClusterClientset) RbacV1alpha1() kcprbacv1alpha1.RbacV1alpha1ClusterInterface {
	return &fakerbacv1alpha1.RbacV1alpha1ClusterClient{Fake: c.Fake}
}

// RbacV1beta1 retrieves the RbacV1beta1ClusterClient.
func (c *ClusterClientset) RbacV1beta1() kcprbacv1beta1.RbacV1beta1ClusterInterface {
	return &fakerbacv1beta1.RbacV1beta1ClusterClient{Fake: c.Fake}
}

// ResourceV1alpha3 retrieves the ResourceV1alpha3ClusterClient.
func (c *ClusterClientset) ResourceV1alpha3() kcpresourcev1alpha3.ResourceV1alpha3ClusterInterface {
	return &fakeresourcev1alpha3.ResourceV1alpha3ClusterClient{Fake: c.Fake}
}

// ResourceV1beta1 retrieves the ResourceV1beta1ClusterClient.
func (c *ClusterClientset) ResourceV1beta1() kcpresourcev1beta1.ResourceV1beta1ClusterInterface {
	return &fakeresourcev1beta1.ResourceV1beta1ClusterClient{Fake: c.Fake}
}

// SchedulingV1 retrieves the SchedulingV1ClusterClient.
func (c *ClusterClientset) SchedulingV1() kcpschedulingv1.SchedulingV1ClusterInterface {
	return &fakeschedulingv1.SchedulingV1ClusterClient{Fake: c.Fake}
}

// SchedulingV1alpha1 retrieves the SchedulingV1alpha1ClusterClient.
func (c *ClusterClientset) SchedulingV1alpha1() kcpschedulingv1alpha1.SchedulingV1alpha1ClusterInterface {
	return &fakeschedulingv1alpha1.SchedulingV1alpha1ClusterClient{Fake: c.Fake}
}

// SchedulingV1beta1 retrieves the SchedulingV1beta1ClusterClient.
func (c *ClusterClientset) SchedulingV1beta1() kcpschedulingv1beta1.SchedulingV1beta1ClusterInterface {
	return &fakeschedulingv1beta1.SchedulingV1beta1ClusterClient{Fake: c.Fake}
}

// StoragemigrationV1alpha1 retrieves the StoragemigrationV1alpha1ClusterClient.
func (c *ClusterClientset) StoragemigrationV1alpha1() kcpstoragemigrationv1alpha1.StoragemigrationV1alpha1ClusterInterface {
	return &fakestoragemigrationv1alpha1.StoragemigrationV1alpha1ClusterClient{Fake: c.Fake}
}

// StorageV1 retrieves the StorageV1ClusterClient.
func (c *ClusterClientset) StorageV1() kcpstoragev1.StorageV1ClusterInterface {
	return &fakestoragev1.StorageV1ClusterClient{Fake: c.Fake}
}

// StorageV1alpha1 retrieves the StorageV1alpha1ClusterClient.
func (c *ClusterClientset) StorageV1alpha1() kcpstoragev1alpha1.StorageV1alpha1ClusterInterface {
	return &fakestoragev1alpha1.StorageV1alpha1ClusterClient{Fake: c.Fake}
}

// StorageV1beta1 retrieves the StorageV1beta1ClusterClient.
func (c *ClusterClientset) StorageV1beta1() kcpstoragev1beta1.StorageV1beta1ClusterInterface {
	return &fakestoragev1beta1.StorageV1beta1ClusterClient{Fake: c.Fake}
}

// Cluster scopes this clientset to one cluster.
func (c *ClusterClientset) Cluster(clusterPath logicalcluster.Path) client.Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}
	return &Clientset{
		Fake:        c.Fake,
		discovery:   &kcpfakediscovery.FakeDiscovery{Fake: c.Fake, ClusterPath: clusterPath},
		tracker:     c.tracker.Cluster(clusterPath),
		clusterPath: clusterPath,
	}
}

var _ client.Interface = (*Clientset)(nil)

// Clientset contains the clients for groups.
type Clientset struct {
	*kcptesting.Fake
	discovery   *kcpfakediscovery.FakeDiscovery
	tracker     kcptesting.ScopedObjectTracker
	clusterPath logicalcluster.Path
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() kcptesting.ScopedObjectTracker {
	return c.tracker
}

// AdmissionregistrationV1 retrieves the AdmissionregistrationV1Client.
func (c *Clientset) AdmissionregistrationV1() admissionregistrationv1.AdmissionregistrationV1Interface {
	return &fakeadmissionregistrationv1.AdmissionregistrationV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AdmissionregistrationV1alpha1 retrieves the AdmissionregistrationV1alpha1Client.
func (c *Clientset) AdmissionregistrationV1alpha1() admissionregistrationv1alpha1.AdmissionregistrationV1alpha1Interface {
	return &fakeadmissionregistrationv1alpha1.AdmissionregistrationV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AdmissionregistrationV1beta1 retrieves the AdmissionregistrationV1beta1Client.
func (c *Clientset) AdmissionregistrationV1beta1() admissionregistrationv1beta1.AdmissionregistrationV1beta1Interface {
	return &fakeadmissionregistrationv1beta1.AdmissionregistrationV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AppsV1 retrieves the AppsV1Client.
func (c *Clientset) AppsV1() appsv1.AppsV1Interface {
	return &fakeappsv1.AppsV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AppsV1beta1 retrieves the AppsV1beta1Client.
func (c *Clientset) AppsV1beta1() appsv1beta1.AppsV1beta1Interface {
	return &fakeappsv1beta1.AppsV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AppsV1beta2 retrieves the AppsV1beta2Client.
func (c *Clientset) AppsV1beta2() appsv1beta2.AppsV1beta2Interface {
	return &fakeappsv1beta2.AppsV1beta2Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AuthenticationV1 retrieves the AuthenticationV1Client.
func (c *Clientset) AuthenticationV1() authenticationv1.AuthenticationV1Interface {
	return &fakeauthenticationv1.AuthenticationV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AuthenticationV1alpha1 retrieves the AuthenticationV1alpha1Client.
func (c *Clientset) AuthenticationV1alpha1() authenticationv1alpha1.AuthenticationV1alpha1Interface {
	return &fakeauthenticationv1alpha1.AuthenticationV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AuthenticationV1beta1 retrieves the AuthenticationV1beta1Client.
func (c *Clientset) AuthenticationV1beta1() authenticationv1beta1.AuthenticationV1beta1Interface {
	return &fakeauthenticationv1beta1.AuthenticationV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AuthorizationV1 retrieves the AuthorizationV1Client.
func (c *Clientset) AuthorizationV1() authorizationv1.AuthorizationV1Interface {
	return &fakeauthorizationv1.AuthorizationV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AuthorizationV1beta1 retrieves the AuthorizationV1beta1Client.
func (c *Clientset) AuthorizationV1beta1() authorizationv1beta1.AuthorizationV1beta1Interface {
	return &fakeauthorizationv1beta1.AuthorizationV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AutoscalingV1 retrieves the AutoscalingV1Client.
func (c *Clientset) AutoscalingV1() autoscalingv1.AutoscalingV1Interface {
	return &fakeautoscalingv1.AutoscalingV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AutoscalingV2 retrieves the AutoscalingV2Client.
func (c *Clientset) AutoscalingV2() autoscalingv2.AutoscalingV2Interface {
	return &fakeautoscalingv2.AutoscalingV2Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AutoscalingV2beta1 retrieves the AutoscalingV2beta1Client.
func (c *Clientset) AutoscalingV2beta1() autoscalingv2beta1.AutoscalingV2beta1Interface {
	return &fakeautoscalingv2beta1.AutoscalingV2beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// AutoscalingV2beta2 retrieves the AutoscalingV2beta2Client.
func (c *Clientset) AutoscalingV2beta2() autoscalingv2beta2.AutoscalingV2beta2Interface {
	return &fakeautoscalingv2beta2.AutoscalingV2beta2Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// BatchV1 retrieves the BatchV1Client.
func (c *Clientset) BatchV1() batchv1.BatchV1Interface {
	return &fakebatchv1.BatchV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// BatchV1beta1 retrieves the BatchV1beta1Client.
func (c *Clientset) BatchV1beta1() batchv1beta1.BatchV1beta1Interface {
	return &fakebatchv1beta1.BatchV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CertificatesV1 retrieves the CertificatesV1Client.
func (c *Clientset) CertificatesV1() certificatesv1.CertificatesV1Interface {
	return &fakecertificatesv1.CertificatesV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CertificatesV1alpha1 retrieves the CertificatesV1alpha1Client.
func (c *Clientset) CertificatesV1alpha1() certificatesv1alpha1.CertificatesV1alpha1Interface {
	return &fakecertificatesv1alpha1.CertificatesV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CertificatesV1beta1 retrieves the CertificatesV1beta1Client.
func (c *Clientset) CertificatesV1beta1() certificatesv1beta1.CertificatesV1beta1Interface {
	return &fakecertificatesv1beta1.CertificatesV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CoordinationV1 retrieves the CoordinationV1Client.
func (c *Clientset) CoordinationV1() coordinationv1.CoordinationV1Interface {
	return &fakecoordinationv1.CoordinationV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CoordinationV1alpha2 retrieves the CoordinationV1alpha2Client.
func (c *Clientset) CoordinationV1alpha2() coordinationv1alpha2.CoordinationV1alpha2Interface {
	return &fakecoordinationv1alpha2.CoordinationV1alpha2Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CoordinationV1beta1 retrieves the CoordinationV1beta1Client.
func (c *Clientset) CoordinationV1beta1() coordinationv1beta1.CoordinationV1beta1Interface {
	return &fakecoordinationv1beta1.CoordinationV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// CoreV1 retrieves the CoreV1Client.
func (c *Clientset) CoreV1() corev1.CoreV1Interface {
	return &fakecorev1.CoreV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// DiscoveryV1 retrieves the DiscoveryV1Client.
func (c *Clientset) DiscoveryV1() discoveryv1.DiscoveryV1Interface {
	return &fakediscoveryv1.DiscoveryV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// DiscoveryV1beta1 retrieves the DiscoveryV1beta1Client.
func (c *Clientset) DiscoveryV1beta1() discoveryv1beta1.DiscoveryV1beta1Interface {
	return &fakediscoveryv1beta1.DiscoveryV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// EventsV1 retrieves the EventsV1Client.
func (c *Clientset) EventsV1() eventsv1.EventsV1Interface {
	return &fakeeventsv1.EventsV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// EventsV1beta1 retrieves the EventsV1beta1Client.
func (c *Clientset) EventsV1beta1() eventsv1beta1.EventsV1beta1Interface {
	return &fakeeventsv1beta1.EventsV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// ExtensionsV1beta1 retrieves the ExtensionsV1beta1Client.
func (c *Clientset) ExtensionsV1beta1() extensionsv1beta1.ExtensionsV1beta1Interface {
	return &fakeextensionsv1beta1.ExtensionsV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// FlowcontrolV1 retrieves the FlowcontrolV1Client.
func (c *Clientset) FlowcontrolV1() flowcontrolv1.FlowcontrolV1Interface {
	return &fakeflowcontrolv1.FlowcontrolV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// FlowcontrolV1beta1 retrieves the FlowcontrolV1beta1Client.
func (c *Clientset) FlowcontrolV1beta1() flowcontrolv1beta1.FlowcontrolV1beta1Interface {
	return &fakeflowcontrolv1beta1.FlowcontrolV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// FlowcontrolV1beta2 retrieves the FlowcontrolV1beta2Client.
func (c *Clientset) FlowcontrolV1beta2() flowcontrolv1beta2.FlowcontrolV1beta2Interface {
	return &fakeflowcontrolv1beta2.FlowcontrolV1beta2Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// FlowcontrolV1beta3 retrieves the FlowcontrolV1beta3Client.
func (c *Clientset) FlowcontrolV1beta3() flowcontrolv1beta3.FlowcontrolV1beta3Interface {
	return &fakeflowcontrolv1beta3.FlowcontrolV1beta3Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// InternalV1alpha1 retrieves the InternalV1alpha1Client.
func (c *Clientset) InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface {
	return &fakeinternalv1alpha1.InternalV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NetworkingV1 retrieves the NetworkingV1Client.
func (c *Clientset) NetworkingV1() networkingv1.NetworkingV1Interface {
	return &fakenetworkingv1.NetworkingV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NetworkingV1alpha1 retrieves the NetworkingV1alpha1Client.
func (c *Clientset) NetworkingV1alpha1() networkingv1alpha1.NetworkingV1alpha1Interface {
	return &fakenetworkingv1alpha1.NetworkingV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NetworkingV1beta1 retrieves the NetworkingV1beta1Client.
func (c *Clientset) NetworkingV1beta1() networkingv1beta1.NetworkingV1beta1Interface {
	return &fakenetworkingv1beta1.NetworkingV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NodeV1 retrieves the NodeV1Client.
func (c *Clientset) NodeV1() nodev1.NodeV1Interface {
	return &fakenodev1.NodeV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NodeV1alpha1 retrieves the NodeV1alpha1Client.
func (c *Clientset) NodeV1alpha1() nodev1alpha1.NodeV1alpha1Interface {
	return &fakenodev1alpha1.NodeV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// NodeV1beta1 retrieves the NodeV1beta1Client.
func (c *Clientset) NodeV1beta1() nodev1beta1.NodeV1beta1Interface {
	return &fakenodev1beta1.NodeV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// PolicyV1 retrieves the PolicyV1Client.
func (c *Clientset) PolicyV1() policyv1.PolicyV1Interface {
	return &fakepolicyv1.PolicyV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// PolicyV1beta1 retrieves the PolicyV1beta1Client.
func (c *Clientset) PolicyV1beta1() policyv1beta1.PolicyV1beta1Interface {
	return &fakepolicyv1beta1.PolicyV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// RbacV1 retrieves the RbacV1Client.
func (c *Clientset) RbacV1() rbacv1.RbacV1Interface {
	return &fakerbacv1.RbacV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// RbacV1alpha1 retrieves the RbacV1alpha1Client.
func (c *Clientset) RbacV1alpha1() rbacv1alpha1.RbacV1alpha1Interface {
	return &fakerbacv1alpha1.RbacV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// RbacV1beta1 retrieves the RbacV1beta1Client.
func (c *Clientset) RbacV1beta1() rbacv1beta1.RbacV1beta1Interface {
	return &fakerbacv1beta1.RbacV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// ResourceV1alpha3 retrieves the ResourceV1alpha3Client.
func (c *Clientset) ResourceV1alpha3() resourcev1alpha3.ResourceV1alpha3Interface {
	return &fakeresourcev1alpha3.ResourceV1alpha3Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// ResourceV1beta1 retrieves the ResourceV1beta1Client.
func (c *Clientset) ResourceV1beta1() resourcev1beta1.ResourceV1beta1Interface {
	return &fakeresourcev1beta1.ResourceV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// SchedulingV1 retrieves the SchedulingV1Client.
func (c *Clientset) SchedulingV1() schedulingv1.SchedulingV1Interface {
	return &fakeschedulingv1.SchedulingV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// SchedulingV1alpha1 retrieves the SchedulingV1alpha1Client.
func (c *Clientset) SchedulingV1alpha1() schedulingv1alpha1.SchedulingV1alpha1Interface {
	return &fakeschedulingv1alpha1.SchedulingV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// SchedulingV1beta1 retrieves the SchedulingV1beta1Client.
func (c *Clientset) SchedulingV1beta1() schedulingv1beta1.SchedulingV1beta1Interface {
	return &fakeschedulingv1beta1.SchedulingV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// StoragemigrationV1alpha1 retrieves the StoragemigrationV1alpha1Client.
func (c *Clientset) StoragemigrationV1alpha1() storagemigrationv1alpha1.StoragemigrationV1alpha1Interface {
	return &fakestoragemigrationv1alpha1.StoragemigrationV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// StorageV1 retrieves the StorageV1Client.
func (c *Clientset) StorageV1() storagev1.StorageV1Interface {
	return &fakestoragev1.StorageV1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// StorageV1alpha1 retrieves the StorageV1alpha1Client.
func (c *Clientset) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	return &fakestoragev1alpha1.StorageV1alpha1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}

// StorageV1beta1 retrieves the StorageV1beta1Client.
func (c *Clientset) StorageV1beta1() storagev1beta1.StorageV1beta1Interface {
	return &fakestoragev1beta1.StorageV1beta1Client{Fake: c.Fake, ClusterPath: c.clusterPath}
}
