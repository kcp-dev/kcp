/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1beta1

import (
	"context"

	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"

	coordinationv1beta1 "k8s.io/api/coordination/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/watch"
	coordinationv1beta1client "k8s.io/client-go/kubernetes/typed/coordination/v1beta1"
)

// LeasesClusterGetter has a method to return a LeaseClusterInterface.
// A group's cluster client should implement this interface.
type LeasesClusterGetter interface {
	Leases() LeaseClusterInterface
}

// LeaseClusterInterface can operate on Leases across all clusters,
// or scope down to one cluster and return a LeasesNamespacer.
type LeaseClusterInterface interface {
	Cluster(logicalcluster.Path) LeasesNamespacer
	List(ctx context.Context, opts metav1.ListOptions) (*coordinationv1beta1.LeaseList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
}

type leasesClusterInterface struct {
	clientCache kcpclient.Cache[*coordinationv1beta1client.CoordinationV1beta1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *leasesClusterInterface) Cluster(clusterPath logicalcluster.Path) LeasesNamespacer {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &leasesNamespacer{clientCache: c.clientCache, clusterPath: clusterPath}
}

// List returns the entire collection of all Leases across all clusters.
func (c *leasesClusterInterface) List(ctx context.Context, opts metav1.ListOptions) (*coordinationv1beta1.LeaseList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Leases(metav1.NamespaceAll).List(ctx, opts)
}

// Watch begins to watch all Leases across all clusters.
func (c *leasesClusterInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Leases(metav1.NamespaceAll).Watch(ctx, opts)
}

// LeasesNamespacer can scope to objects within a namespace, returning a coordinationv1beta1client.LeaseInterface.
type LeasesNamespacer interface {
	Namespace(string) coordinationv1beta1client.LeaseInterface
}

type leasesNamespacer struct {
	clientCache kcpclient.Cache[*coordinationv1beta1client.CoordinationV1beta1Client]
	clusterPath logicalcluster.Path
}

func (n *leasesNamespacer) Namespace(namespace string) coordinationv1beta1client.LeaseInterface {
	return n.clientCache.ClusterOrDie(n.clusterPath).Leases(namespace)
}
