/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	topologyv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/topology/v1alpha1"
)

// PartitionSetClusterLister can list PartitionSets across all workspaces, or scope down to a PartitionSetLister for one workspace.
// All objects returned here must be treated as read-only.
type PartitionSetClusterLister interface {
	// List lists all PartitionSets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*topologyv1alpha1.PartitionSet, err error)
	// Cluster returns a lister that can list and get PartitionSets in one workspace.
	Cluster(clusterName logicalcluster.Name) PartitionSetLister
	PartitionSetClusterListerExpansion
}

type partitionSetClusterLister struct {
	indexer cache.Indexer
}

// NewPartitionSetClusterLister returns a new PartitionSetClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewPartitionSetClusterLister(indexer cache.Indexer) *partitionSetClusterLister {
	return &partitionSetClusterLister{indexer: indexer}
}

// List lists all PartitionSets in the indexer across all workspaces.
func (s *partitionSetClusterLister) List(selector labels.Selector) (ret []*topologyv1alpha1.PartitionSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*topologyv1alpha1.PartitionSet))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get PartitionSets.
func (s *partitionSetClusterLister) Cluster(clusterName logicalcluster.Name) PartitionSetLister {
	return &partitionSetLister{indexer: s.indexer, clusterName: clusterName}
}

// PartitionSetLister can list all PartitionSets, or get one in particular.
// All objects returned here must be treated as read-only.
type PartitionSetLister interface {
	// List lists all PartitionSets in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*topologyv1alpha1.PartitionSet, err error)
	// Get retrieves the PartitionSet from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*topologyv1alpha1.PartitionSet, error)
	PartitionSetListerExpansion
}

// partitionSetLister can list all PartitionSets inside a workspace.
type partitionSetLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all PartitionSets in the indexer for a workspace.
func (s *partitionSetLister) List(selector labels.Selector) (ret []*topologyv1alpha1.PartitionSet, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*topologyv1alpha1.PartitionSet))
	})
	return ret, err
}

// Get retrieves the PartitionSet from the indexer for a given workspace and name.
func (s *partitionSetLister) Get(name string) (*topologyv1alpha1.PartitionSet, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(topologyv1alpha1.Resource("partitionsets"), name)
	}
	return obj.(*topologyv1alpha1.PartitionSet), nil
}

// NewPartitionSetLister returns a new PartitionSetLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewPartitionSetLister(indexer cache.Indexer) *partitionSetScopedLister {
	return &partitionSetScopedLister{indexer: indexer}
}

// partitionSetScopedLister can list all PartitionSets inside a workspace.
type partitionSetScopedLister struct {
	indexer cache.Indexer
}

// List lists all PartitionSets in the indexer for a workspace.
func (s *partitionSetScopedLister) List(selector labels.Selector) (ret []*topologyv1alpha1.PartitionSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*topologyv1alpha1.PartitionSet))
	})
	return ret, err
}

// Get retrieves the PartitionSet from the indexer for a given workspace and name.
func (s *partitionSetScopedLister) Get(name string) (*topologyv1alpha1.PartitionSet, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(topologyv1alpha1.Resource("partitionsets"), name)
	}
	return obj.(*topologyv1alpha1.PartitionSet), nil
}
