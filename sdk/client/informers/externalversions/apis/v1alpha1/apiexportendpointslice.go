/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	apisv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/apis/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	apisv1alpha1listers "github.com/kcp-dev/kcp/sdk/client/listers/apis/v1alpha1"
)

// APIExportEndpointSliceClusterInformer provides access to a shared informer and lister for
// APIExportEndpointSlices.
type APIExportEndpointSliceClusterInformer interface {
	Cluster(logicalcluster.Name) APIExportEndpointSliceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() apisv1alpha1listers.APIExportEndpointSliceClusterLister
}

type aPIExportEndpointSliceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewAPIExportEndpointSliceClusterInformer constructs a new informer for APIExportEndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIExportEndpointSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIExportEndpointSliceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIExportEndpointSliceClusterInformer constructs a new informer for APIExportEndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIExportEndpointSliceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApisV1alpha1().APIExportEndpointSlices().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApisV1alpha1().APIExportEndpointSlices().Watch(context.TODO(), options)
			},
		},
		&apisv1alpha1.APIExportEndpointSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIExportEndpointSliceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredAPIExportEndpointSliceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *aPIExportEndpointSliceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&apisv1alpha1.APIExportEndpointSlice{}, f.defaultInformer)
}

func (f *aPIExportEndpointSliceClusterInformer) Lister() apisv1alpha1listers.APIExportEndpointSliceClusterLister {
	return apisv1alpha1listers.NewAPIExportEndpointSliceClusterLister(f.Informer().GetIndexer())
}

// APIExportEndpointSliceInformer provides access to a shared informer and lister for
// APIExportEndpointSlices.
type APIExportEndpointSliceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() apisv1alpha1listers.APIExportEndpointSliceLister
}

func (f *aPIExportEndpointSliceClusterInformer) Cluster(clusterName logicalcluster.Name) APIExportEndpointSliceInformer {
	return &aPIExportEndpointSliceInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type aPIExportEndpointSliceInformer struct {
	informer cache.SharedIndexInformer
	lister   apisv1alpha1listers.APIExportEndpointSliceLister
}

func (f *aPIExportEndpointSliceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *aPIExportEndpointSliceInformer) Lister() apisv1alpha1listers.APIExportEndpointSliceLister {
	return f.lister
}

type aPIExportEndpointSliceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *aPIExportEndpointSliceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apisv1alpha1.APIExportEndpointSlice{}, f.defaultInformer)
}

func (f *aPIExportEndpointSliceScopedInformer) Lister() apisv1alpha1listers.APIExportEndpointSliceLister {
	return apisv1alpha1listers.NewAPIExportEndpointSliceLister(f.Informer().GetIndexer())
}

// NewAPIExportEndpointSliceInformer constructs a new informer for APIExportEndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewAPIExportEndpointSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredAPIExportEndpointSliceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredAPIExportEndpointSliceInformer constructs a new informer for APIExportEndpointSlice type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredAPIExportEndpointSliceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApisV1alpha1().APIExportEndpointSlices().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ApisV1alpha1().APIExportEndpointSlices().Watch(context.TODO(), options)
			},
		},
		&apisv1alpha1.APIExportEndpointSlice{},
		resyncPeriod,
		indexers,
	)
}

func (f *aPIExportEndpointSliceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredAPIExportEndpointSliceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
