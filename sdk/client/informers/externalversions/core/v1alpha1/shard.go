/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	corev1alpha1 "github.com/kcp-dev/kcp/sdk/apis/core/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	corev1alpha1listers "github.com/kcp-dev/kcp/sdk/client/listers/core/v1alpha1"
)

// ShardClusterInformer provides access to a shared informer and lister for
// Shards.
type ShardClusterInformer interface {
	Cluster(logicalcluster.Name) ShardInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() corev1alpha1listers.ShardClusterLister
}

type shardClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewShardClusterInformer constructs a new informer for Shard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewShardClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredShardClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredShardClusterInformer constructs a new informer for Shard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredShardClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Shards().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Shards().Watch(context.TODO(), options)
			},
		},
		&corev1alpha1.Shard{},
		resyncPeriod,
		indexers,
	)
}

func (f *shardClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredShardClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *shardClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&corev1alpha1.Shard{}, f.defaultInformer)
}

func (f *shardClusterInformer) Lister() corev1alpha1listers.ShardClusterLister {
	return corev1alpha1listers.NewShardClusterLister(f.Informer().GetIndexer())
}

// ShardInformer provides access to a shared informer and lister for
// Shards.
type ShardInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() corev1alpha1listers.ShardLister
}

func (f *shardClusterInformer) Cluster(clusterName logicalcluster.Name) ShardInformer {
	return &shardInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type shardInformer struct {
	informer cache.SharedIndexInformer
	lister   corev1alpha1listers.ShardLister
}

func (f *shardInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *shardInformer) Lister() corev1alpha1listers.ShardLister {
	return f.lister
}

type shardScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *shardScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&corev1alpha1.Shard{}, f.defaultInformer)
}

func (f *shardScopedInformer) Lister() corev1alpha1listers.ShardLister {
	return corev1alpha1listers.NewShardLister(f.Informer().GetIndexer())
}

// NewShardInformer constructs a new informer for Shard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewShardInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredShardInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredShardInformer constructs a new informer for Shard type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredShardInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Shards().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.CoreV1alpha1().Shards().Watch(context.TODO(), options)
			},
		},
		&corev1alpha1.Shard{},
		resyncPeriod,
		indexers,
	)
}

func (f *shardScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredShardInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
