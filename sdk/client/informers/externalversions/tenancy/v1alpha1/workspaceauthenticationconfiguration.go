/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	kcptenancyv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/tenancy/v1alpha1"
	kcpversioned "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	kcpcluster "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	kcpinternalinterfaces "github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	kcpv1alpha1 "github.com/kcp-dev/kcp/sdk/client/listers/tenancy/v1alpha1"
	logicalcluster "github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// WorkspaceAuthenticationConfigurationClusterInformer provides access to a shared informer and lister for
// WorkspaceAuthenticationConfigurations.
type WorkspaceAuthenticationConfigurationClusterInformer interface {
	Cluster(logicalcluster.Name) WorkspaceAuthenticationConfigurationInformer
	ClusterWithContext(context.Context, logicalcluster.Name) WorkspaceAuthenticationConfigurationInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kcpv1alpha1.WorkspaceAuthenticationConfigurationClusterLister
}

type workspaceAuthenticationConfigurationClusterInformer struct {
	factory          kcpinternalinterfaces.SharedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewWorkspaceAuthenticationConfigurationClusterInformer constructs a new informer for WorkspaceAuthenticationConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkspaceAuthenticationConfigurationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkspaceAuthenticationConfigurationClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkspaceAuthenticationConfigurationClusterInformer constructs a new informer for WorkspaceAuthenticationConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkspaceAuthenticationConfigurationClusterInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().WorkspaceAuthenticationConfigurations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().WorkspaceAuthenticationConfigurations().Watch(context.Background(), options)
			},
		},
		&kcptenancyv1alpha1.WorkspaceAuthenticationConfiguration{},
		resyncPeriod,
		indexers,
	)
}

func (i *workspaceAuthenticationConfigurationClusterInformer) defaultInformer(client kcpcluster.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredWorkspaceAuthenticationConfigurationClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName:             kcpcache.ClusterIndexFunc,
		kcpcache.ClusterAndNamespaceIndexName: kcpcache.ClusterAndNamespaceIndexFunc,
	}, i.tweakListOptions)
}

func (i *workspaceAuthenticationConfigurationClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return i.factory.InformerFor(&kcptenancyv1alpha1.WorkspaceAuthenticationConfiguration{}, i.defaultInformer)
}

func (i *workspaceAuthenticationConfigurationClusterInformer) Lister() kcpv1alpha1.WorkspaceAuthenticationConfigurationClusterLister {
	return kcpv1alpha1.NewWorkspaceAuthenticationConfigurationClusterLister(i.Informer().GetIndexer())
}

func (i *workspaceAuthenticationConfigurationClusterInformer) Cluster(clusterName logicalcluster.Name) WorkspaceAuthenticationConfigurationInformer {
	return &workspaceAuthenticationConfigurationInformer{
		informer: i.Informer().Cluster(clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

func (i *workspaceAuthenticationConfigurationClusterInformer) ClusterWithContext(ctx context.Context, clusterName logicalcluster.Name) WorkspaceAuthenticationConfigurationInformer {
	return &workspaceAuthenticationConfigurationInformer{
		informer: i.Informer().ClusterWithContext(ctx, clusterName),
		lister:   i.Lister().Cluster(clusterName),
	}
}

type workspaceAuthenticationConfigurationInformer struct {
	informer cache.SharedIndexInformer
	lister   kcpv1alpha1.WorkspaceAuthenticationConfigurationLister
}

func (i *workspaceAuthenticationConfigurationInformer) Informer() cache.SharedIndexInformer {
	return i.informer
}

func (i *workspaceAuthenticationConfigurationInformer) Lister() kcpv1alpha1.WorkspaceAuthenticationConfigurationLister {
	return i.lister
}

// WorkspaceAuthenticationConfigurationInformer provides access to a shared informer and lister for
// WorkspaceAuthenticationConfigurations.
type WorkspaceAuthenticationConfigurationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kcpv1alpha1.WorkspaceAuthenticationConfigurationLister
}

type workspaceAuthenticationConfigurationScopedInformer struct {
	factory          kcpinternalinterfaces.SharedScopedInformerFactory
	tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc
}

// NewWorkspaceAuthenticationConfigurationInformer constructs a new informer for WorkspaceAuthenticationConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewWorkspaceAuthenticationConfigurationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredWorkspaceAuthenticationConfigurationInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredWorkspaceAuthenticationConfigurationInformer constructs a new informer for WorkspaceAuthenticationConfiguration type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredWorkspaceAuthenticationConfigurationInformer(client kcpversioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions kcpinternalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().WorkspaceAuthenticationConfigurations().List(context.Background(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().WorkspaceAuthenticationConfigurations().Watch(context.Background(), options)
			},
		},
		&kcptenancyv1alpha1.WorkspaceAuthenticationConfiguration{},
		resyncPeriod,
		indexers,
	)
}

func (i *workspaceAuthenticationConfigurationScopedInformer) Informer() cache.SharedIndexInformer {
	return i.factory.InformerFor(&kcptenancyv1alpha1.WorkspaceAuthenticationConfiguration{}, i.defaultInformer)
}

func (i *workspaceAuthenticationConfigurationScopedInformer) Lister() kcpv1alpha1.WorkspaceAuthenticationConfigurationLister {
	return kcpv1alpha1.NewWorkspaceAuthenticationConfigurationLister(i.Informer().GetIndexer())
}

func (i *workspaceAuthenticationConfigurationScopedInformer) defaultInformer(client kcpversioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredWorkspaceAuthenticationConfigurationInformer(client, resyncPeriod, cache.Indexers{}, i.tweakListOptions)
}
