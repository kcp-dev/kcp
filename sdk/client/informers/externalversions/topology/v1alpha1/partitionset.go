/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	topologyv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/topology/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/sdk/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/sdk/client/informers/externalversions/internalinterfaces"
	topologyv1alpha1listers "github.com/kcp-dev/kcp/sdk/client/listers/topology/v1alpha1"
)

// PartitionSetClusterInformer provides access to a shared informer and lister for
// PartitionSets.
type PartitionSetClusterInformer interface {
	Cluster(logicalcluster.Name) PartitionSetInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() topologyv1alpha1listers.PartitionSetClusterLister
}

type partitionSetClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewPartitionSetClusterInformer constructs a new informer for PartitionSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPartitionSetClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPartitionSetClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPartitionSetClusterInformer constructs a new informer for PartitionSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPartitionSetClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopologyV1alpha1().PartitionSets().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopologyV1alpha1().PartitionSets().Watch(context.TODO(), options)
			},
		},
		&topologyv1alpha1.PartitionSet{},
		resyncPeriod,
		indexers,
	)
}

func (f *partitionSetClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredPartitionSetClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *partitionSetClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&topologyv1alpha1.PartitionSet{}, f.defaultInformer)
}

func (f *partitionSetClusterInformer) Lister() topologyv1alpha1listers.PartitionSetClusterLister {
	return topologyv1alpha1listers.NewPartitionSetClusterLister(f.Informer().GetIndexer())
}

// PartitionSetInformer provides access to a shared informer and lister for
// PartitionSets.
type PartitionSetInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() topologyv1alpha1listers.PartitionSetLister
}

func (f *partitionSetClusterInformer) Cluster(clusterName logicalcluster.Name) PartitionSetInformer {
	return &partitionSetInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type partitionSetInformer struct {
	informer cache.SharedIndexInformer
	lister   topologyv1alpha1listers.PartitionSetLister
}

func (f *partitionSetInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *partitionSetInformer) Lister() topologyv1alpha1listers.PartitionSetLister {
	return f.lister
}

type partitionSetScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *partitionSetScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&topologyv1alpha1.PartitionSet{}, f.defaultInformer)
}

func (f *partitionSetScopedInformer) Lister() topologyv1alpha1listers.PartitionSetLister {
	return topologyv1alpha1listers.NewPartitionSetLister(f.Informer().GetIndexer())
}

// NewPartitionSetInformer constructs a new informer for PartitionSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewPartitionSetInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredPartitionSetInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredPartitionSetInformer constructs a new informer for PartitionSet type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredPartitionSetInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopologyV1alpha1().PartitionSets().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopologyV1alpha1().PartitionSets().Watch(context.TODO(), options)
			},
		},
		&topologyv1alpha1.PartitionSet{},
		resyncPeriod,
		indexers,
	)
}

func (f *partitionSetScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredPartitionSetInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
