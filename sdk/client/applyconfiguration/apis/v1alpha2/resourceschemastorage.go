/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	apisv1alpha2 "github.com/kcp-dev/kcp/sdk/apis/apis/v1alpha2"
)

// ResourceSchemaStorageApplyConfiguration represents a declarative configuration of the ResourceSchemaStorage type for use
// with apply.
type ResourceSchemaStorageApplyConfiguration struct {
	CRD     *apisv1alpha2.ResourceSchemaStorageCRD          `json:"crd,omitempty"`
	Virtual *ResourceSchemaStorageVirtualApplyConfiguration `json:"virtual,omitempty"`
}

// ResourceSchemaStorageApplyConfiguration constructs a declarative configuration of the ResourceSchemaStorage type for use with
// apply.
func ResourceSchemaStorage() *ResourceSchemaStorageApplyConfiguration {
	return &ResourceSchemaStorageApplyConfiguration{}
}

// WithCRD sets the CRD field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CRD field is set to the value of the last call.
func (b *ResourceSchemaStorageApplyConfiguration) WithCRD(value apisv1alpha2.ResourceSchemaStorageCRD) *ResourceSchemaStorageApplyConfiguration {
	b.CRD = &value
	return b
}

// WithVirtual sets the Virtual field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Virtual field is set to the value of the last call.
func (b *ResourceSchemaStorageApplyConfiguration) WithVirtual(value *ResourceSchemaStorageVirtualApplyConfiguration) *ResourceSchemaStorageApplyConfiguration {
	b.Virtual = value
	return b
}
