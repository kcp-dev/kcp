//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	proxyv1alpha1 "github.com/kcp-dev/kcp/proxy/apis/proxy/v1alpha1"
)

// WorkspaceProxyClusterLister can list WorkspaceProxies across all workspaces, or scope down to a WorkspaceProxyLister for one workspace.
// All objects returned here must be treated as read-only.
type WorkspaceProxyClusterLister interface {
	// List lists all WorkspaceProxies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.WorkspaceProxy, err error)
	// Cluster returns a lister that can list and get WorkspaceProxies in one workspace.
	Cluster(clusterName logicalcluster.Name) WorkspaceProxyLister
	WorkspaceProxyClusterListerExpansion
}

type workspaceProxyClusterLister struct {
	indexer cache.Indexer
}

// NewWorkspaceProxyClusterLister returns a new WorkspaceProxyClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewWorkspaceProxyClusterLister(indexer cache.Indexer) *workspaceProxyClusterLister {
	return &workspaceProxyClusterLister{indexer: indexer}
}

// List lists all WorkspaceProxies in the indexer across all workspaces.
func (s *workspaceProxyClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.WorkspaceProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*proxyv1alpha1.WorkspaceProxy))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get WorkspaceProxies.
func (s *workspaceProxyClusterLister) Cluster(clusterName logicalcluster.Name) WorkspaceProxyLister {
	return &workspaceProxyLister{indexer: s.indexer, clusterName: clusterName}
}

// WorkspaceProxyLister can list all WorkspaceProxies, or get one in particular.
// All objects returned here must be treated as read-only.
type WorkspaceProxyLister interface {
	// List lists all WorkspaceProxies in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.WorkspaceProxy, err error)
	// Get retrieves the WorkspaceProxy from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*proxyv1alpha1.WorkspaceProxy, error)
	WorkspaceProxyListerExpansion
}

// workspaceProxyLister can list all WorkspaceProxies inside a workspace.
type workspaceProxyLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all WorkspaceProxies in the indexer for a workspace.
func (s *workspaceProxyLister) List(selector labels.Selector) (ret []*proxyv1alpha1.WorkspaceProxy, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.WorkspaceProxy))
	})
	return ret, err
}

// Get retrieves the WorkspaceProxy from the indexer for a given workspace and name.
func (s *workspaceProxyLister) Get(name string) (*proxyv1alpha1.WorkspaceProxy, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("workspaceproxies"), name)
	}
	return obj.(*proxyv1alpha1.WorkspaceProxy), nil
}

// NewWorkspaceProxyLister returns a new WorkspaceProxyLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewWorkspaceProxyLister(indexer cache.Indexer) *workspaceProxyScopedLister {
	return &workspaceProxyScopedLister{indexer: indexer}
}

// workspaceProxyScopedLister can list all WorkspaceProxies inside a workspace.
type workspaceProxyScopedLister struct {
	indexer cache.Indexer
}

// List lists all WorkspaceProxies in the indexer for a workspace.
func (s *workspaceProxyScopedLister) List(selector labels.Selector) (ret []*proxyv1alpha1.WorkspaceProxy, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.WorkspaceProxy))
	})
	return ret, err
}

// Get retrieves the WorkspaceProxy from the indexer for a given workspace and name.
func (s *workspaceProxyScopedLister) Get(name string) (*proxyv1alpha1.WorkspaceProxy, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("workspaceproxies"), name)
	}
	return obj.(*proxyv1alpha1.WorkspaceProxy), nil
}
