//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	proxyv1alpha1 "github.com/kcp-dev/kcp/proxy/apis/proxy/v1alpha1"
)

// ClusterClusterLister can list Clusters across all workspaces, or scope down to a ClusterLister for one workspace.
// All objects returned here must be treated as read-only.
type ClusterClusterLister interface {
	// List lists all Clusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.Cluster, err error)
	// Cluster returns a lister that can list and get Clusters in one workspace.
	Cluster(clusterName logicalcluster.Name) ClusterLister
	ClusterClusterListerExpansion
}

type clusterClusterLister struct {
	indexer cache.Indexer
}

// NewClusterClusterLister returns a new ClusterClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewClusterClusterLister(indexer cache.Indexer) *clusterClusterLister {
	return &clusterClusterLister{indexer: indexer}
}

// List lists all Clusters in the indexer across all workspaces.
func (s *clusterClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.Cluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*proxyv1alpha1.Cluster))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Clusters.
func (s *clusterClusterLister) Cluster(clusterName logicalcluster.Name) ClusterLister {
	return &clusterLister{indexer: s.indexer, clusterName: clusterName}
}

// ClusterLister can list all Clusters, or get one in particular.
// All objects returned here must be treated as read-only.
type ClusterLister interface {
	// List lists all Clusters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.Cluster, err error)
	// Get retrieves the Cluster from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*proxyv1alpha1.Cluster, error)
	ClusterListerExpansion
}

// clusterLister can list all Clusters inside a workspace.
type clusterLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Clusters in the indexer for a workspace.
func (s *clusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.Cluster, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.Cluster))
	})
	return ret, err
}

// Get retrieves the Cluster from the indexer for a given workspace and name.
func (s *clusterLister) Get(name string) (*proxyv1alpha1.Cluster, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("clusters"), name)
	}
	return obj.(*proxyv1alpha1.Cluster), nil
}

// NewClusterLister returns a new ClusterLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewClusterLister(indexer cache.Indexer) *clusterScopedLister {
	return &clusterScopedLister{indexer: indexer}
}

// clusterScopedLister can list all Clusters inside a workspace.
type clusterScopedLister struct {
	indexer cache.Indexer
}

// List lists all Clusters in the indexer for a workspace.
func (s *clusterScopedLister) List(selector labels.Selector) (ret []*proxyv1alpha1.Cluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.Cluster))
	})
	return ret, err
}

// Get retrieves the Cluster from the indexer for a given workspace and name.
func (s *clusterScopedLister) Get(name string) (*proxyv1alpha1.Cluster, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("clusters"), name)
	}
	return obj.(*proxyv1alpha1.Cluster), nil
}
