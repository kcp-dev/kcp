/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/kcp-dev/kcp/proxy/apis/proxy/v1alpha1"
	conditionsv1alpha1 "github.com/kcp-dev/kcp/sdk/apis/third_party/conditions/apis/conditions/v1alpha1"
)

// WorkspaceProxyStatusApplyConfiguration represents an declarative configuration of the WorkspaceProxyStatus type for use
// with apply.
type WorkspaceProxyStatusApplyConfiguration struct {
	URL                    *string                              `json:"URL,omitempty"`
	Phase                  *v1alpha1.WorkspaceProxyPhaseType    `json:"phase,omitempty"`
	LastProxyHeartbeatTime *v1.Time                             `json:"lastProxyHeartbeatTime,omitempty"`
	Conditions             *conditionsv1alpha1.Conditions       `json:"conditions,omitempty"`
	VirtualWorkspaces      []VirtualWorkspaceApplyConfiguration `json:"virtualWorkspaces,omitempty"`
	TunnelWorkspaces       []TunnelWorkspaceApplyConfiguration  `json:"tunnelWorkspaces,omitempty"`
}

// WorkspaceProxyStatusApplyConfiguration constructs an declarative configuration of the WorkspaceProxyStatus type for use with
// apply.
func WorkspaceProxyStatus() *WorkspaceProxyStatusApplyConfiguration {
	return &WorkspaceProxyStatusApplyConfiguration{}
}

// WithURL sets the URL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the URL field is set to the value of the last call.
func (b *WorkspaceProxyStatusApplyConfiguration) WithURL(value string) *WorkspaceProxyStatusApplyConfiguration {
	b.URL = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *WorkspaceProxyStatusApplyConfiguration) WithPhase(value v1alpha1.WorkspaceProxyPhaseType) *WorkspaceProxyStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithLastProxyHeartbeatTime sets the LastProxyHeartbeatTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastProxyHeartbeatTime field is set to the value of the last call.
func (b *WorkspaceProxyStatusApplyConfiguration) WithLastProxyHeartbeatTime(value v1.Time) *WorkspaceProxyStatusApplyConfiguration {
	b.LastProxyHeartbeatTime = &value
	return b
}

// WithConditions sets the Conditions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Conditions field is set to the value of the last call.
func (b *WorkspaceProxyStatusApplyConfiguration) WithConditions(value conditionsv1alpha1.Conditions) *WorkspaceProxyStatusApplyConfiguration {
	b.Conditions = &value
	return b
}

// WithVirtualWorkspaces adds the given value to the VirtualWorkspaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VirtualWorkspaces field.
func (b *WorkspaceProxyStatusApplyConfiguration) WithVirtualWorkspaces(values ...*VirtualWorkspaceApplyConfiguration) *WorkspaceProxyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVirtualWorkspaces")
		}
		b.VirtualWorkspaces = append(b.VirtualWorkspaces, *values[i])
	}
	return b
}

// WithTunnelWorkspaces adds the given value to the TunnelWorkspaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TunnelWorkspaces field.
func (b *WorkspaceProxyStatusApplyConfiguration) WithTunnelWorkspaces(values ...*TunnelWorkspaceApplyConfiguration) *WorkspaceProxyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTunnelWorkspaces")
		}
		b.TunnelWorkspaces = append(b.TunnelWorkspaces, *values[i])
	}
	return b
}
