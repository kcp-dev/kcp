//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	proxyv1alpha1 "github.com/kcp-dev/kcp/proxy/apis/proxy/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/proxy/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/proxy/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/proxy/client/informers/externalversions/internalinterfaces"
	proxyv1alpha1listers "github.com/kcp-dev/kcp/proxy/client/listers/proxy/v1alpha1"
)

// ClusterClusterInformer provides access to a shared informer and lister for
// Clusters.
type ClusterClusterInformer interface {
	Cluster(logicalcluster.Name) ClusterInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() proxyv1alpha1listers.ClusterClusterLister
}

type clusterClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterClusterInformer constructs a new informer for Cluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterClusterInformer constructs a new informer for Cluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProxyV1alpha1().Clusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProxyV1alpha1().Clusters().Watch(context.TODO(), options)
			},
		},
		&proxyv1alpha1.Cluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredClusterClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *clusterClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&proxyv1alpha1.Cluster{}, f.defaultInformer)
}

func (f *clusterClusterInformer) Lister() proxyv1alpha1listers.ClusterClusterLister {
	return proxyv1alpha1listers.NewClusterClusterLister(f.Informer().GetIndexer())
}

// ClusterInformer provides access to a shared informer and lister for
// Clusters.
type ClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() proxyv1alpha1listers.ClusterLister
}

func (f *clusterClusterInformer) Cluster(clusterName logicalcluster.Name) ClusterInformer {
	return &clusterInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type clusterInformer struct {
	informer cache.SharedIndexInformer
	lister   proxyv1alpha1listers.ClusterLister
}

func (f *clusterInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *clusterInformer) Lister() proxyv1alpha1listers.ClusterLister {
	return f.lister
}

type clusterScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *clusterScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&proxyv1alpha1.Cluster{}, f.defaultInformer)
}

func (f *clusterScopedInformer) Lister() proxyv1alpha1listers.ClusterLister {
	return proxyv1alpha1listers.NewClusterLister(f.Informer().GetIndexer())
}

// NewClusterInformer constructs a new informer for Cluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterInformer constructs a new informer for Cluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProxyV1alpha1().Clusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ProxyV1alpha1().Clusters().Watch(context.TODO(), options)
			},
		},
		&proxyv1alpha1.Cluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
