//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v2"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/pkg/client/informers/externalversions/internalinterfaces"
	tenancyv1alpha1listers "github.com/kcp-dev/kcp/pkg/client/listers/tenancy/v1alpha1"
)

// ThisWorkspaceClusterInformer provides access to a shared informer and lister for
// ThisWorkspaces.
type ThisWorkspaceClusterInformer interface {
	Cluster(logicalcluster.Name) ThisWorkspaceInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() tenancyv1alpha1listers.ThisWorkspaceClusterLister
}

type thisWorkspaceClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewThisWorkspaceClusterInformer constructs a new informer for ThisWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewThisWorkspaceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredThisWorkspaceClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredThisWorkspaceClusterInformer constructs a new informer for ThisWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredThisWorkspaceClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ThisWorkspaces().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ThisWorkspaces().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ThisWorkspace{},
		resyncPeriod,
		indexers,
	)
}

func (f *thisWorkspaceClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredThisWorkspaceClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *thisWorkspaceClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ThisWorkspace{}, f.defaultInformer)
}

func (f *thisWorkspaceClusterInformer) Lister() tenancyv1alpha1listers.ThisWorkspaceClusterLister {
	return tenancyv1alpha1listers.NewThisWorkspaceClusterLister(f.Informer().GetIndexer())
}

// ThisWorkspaceInformer provides access to a shared informer and lister for
// ThisWorkspaces.
type ThisWorkspaceInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() tenancyv1alpha1listers.ThisWorkspaceLister
}

func (f *thisWorkspaceClusterInformer) Cluster(cluster logicalcluster.Name) ThisWorkspaceInformer {
	return &thisWorkspaceInformer{
		informer: f.Informer().Cluster(cluster),
		lister:   f.Lister().Cluster(cluster),
	}
}

type thisWorkspaceInformer struct {
	informer cache.SharedIndexInformer
	lister   tenancyv1alpha1listers.ThisWorkspaceLister
}

func (f *thisWorkspaceInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *thisWorkspaceInformer) Lister() tenancyv1alpha1listers.ThisWorkspaceLister {
	return f.lister
}

type thisWorkspaceScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *thisWorkspaceScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&tenancyv1alpha1.ThisWorkspace{}, f.defaultInformer)
}

func (f *thisWorkspaceScopedInformer) Lister() tenancyv1alpha1listers.ThisWorkspaceLister {
	return tenancyv1alpha1listers.NewThisWorkspaceLister(f.Informer().GetIndexer())
}

// NewThisWorkspaceInformer constructs a new informer for ThisWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewThisWorkspaceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredThisWorkspaceInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredThisWorkspaceInformer constructs a new informer for ThisWorkspace type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredThisWorkspaceInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ThisWorkspaces().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TenancyV1alpha1().ThisWorkspaces().Watch(context.TODO(), options)
			},
		},
		&tenancyv1alpha1.ThisWorkspace{},
		resyncPeriod,
		indexers,
	)
}

func (f *thisWorkspaceScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredThisWorkspaceInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
