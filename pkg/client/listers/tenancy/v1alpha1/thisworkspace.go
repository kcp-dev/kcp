//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
)

// ThisWorkspaceClusterLister can list ThisWorkspaces across all workspaces, or scope down to a ThisWorkspaceLister for one workspace.
// All objects returned here must be treated as read-only.
type ThisWorkspaceClusterLister interface {
	// List lists all ThisWorkspaces in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ThisWorkspace, err error)
	// Cluster returns a lister that can list and get ThisWorkspaces in one workspace.
	Cluster(cluster logicalcluster.Name) ThisWorkspaceLister
	ThisWorkspaceClusterListerExpansion
}

type thisWorkspaceClusterLister struct {
	indexer cache.Indexer
}

// NewThisWorkspaceClusterLister returns a new ThisWorkspaceClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewThisWorkspaceClusterLister(indexer cache.Indexer) *thisWorkspaceClusterLister {
	return &thisWorkspaceClusterLister{indexer: indexer}
}

// List lists all ThisWorkspaces in the indexer across all workspaces.
func (s *thisWorkspaceClusterLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ThisWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tenancyv1alpha1.ThisWorkspace))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get ThisWorkspaces.
func (s *thisWorkspaceClusterLister) Cluster(cluster logicalcluster.Name) ThisWorkspaceLister {
	return &thisWorkspaceLister{indexer: s.indexer, cluster: cluster}
}

// ThisWorkspaceLister can list all ThisWorkspaces, or get one in particular.
// All objects returned here must be treated as read-only.
type ThisWorkspaceLister interface {
	// List lists all ThisWorkspaces in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ThisWorkspace, err error)
	// Get retrieves the ThisWorkspace from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*tenancyv1alpha1.ThisWorkspace, error)
	ThisWorkspaceListerExpansion
}

// thisWorkspaceLister can list all ThisWorkspaces inside a workspace.
type thisWorkspaceLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all ThisWorkspaces in the indexer for a workspace.
func (s *thisWorkspaceLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ThisWorkspace, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.cluster, selector, func(i interface{}) {
		ret = append(ret, i.(*tenancyv1alpha1.ThisWorkspace))
	})
	return ret, err
}

// Get retrieves the ThisWorkspace from the indexer for a given workspace and name.
func (s *thisWorkspaceLister) Get(name string) (*tenancyv1alpha1.ThisWorkspace, error) {
	key := kcpcache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("ThisWorkspace"), name)
	}
	return obj.(*tenancyv1alpha1.ThisWorkspace), nil
}

// NewThisWorkspaceLister returns a new ThisWorkspaceLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewThisWorkspaceLister(indexer cache.Indexer) *thisWorkspaceScopedLister {
	return &thisWorkspaceScopedLister{indexer: indexer}
}

// thisWorkspaceScopedLister can list all ThisWorkspaces inside a workspace.
type thisWorkspaceScopedLister struct {
	indexer cache.Indexer
}

// List lists all ThisWorkspaces in the indexer for a workspace.
func (s *thisWorkspaceScopedLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ThisWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*tenancyv1alpha1.ThisWorkspace))
	})
	return ret, err
}

// Get retrieves the ThisWorkspace from the indexer for a given workspace and name.
func (s *thisWorkspaceScopedLister) Get(name string) (*tenancyv1alpha1.ThisWorkspace, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("ThisWorkspace"), name)
	}
	return obj.(*tenancyv1alpha1.ThisWorkspace), nil
}
