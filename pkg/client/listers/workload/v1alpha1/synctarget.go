//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	workloadv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/workload/v1alpha1"
)

// SyncTargetClusterLister can list everything or scope by workspace
type SyncTargetClusterLister struct {
	indexer cache.Indexer
}

// NewSyncTargetClusterLister returns a new SyncTargetClusterLister.
func NewSyncTargetClusterLister(indexer cache.Indexer) *SyncTargetClusterLister {
	return &SyncTargetClusterLister{indexer: indexer}
}

// List lists all workloadv1alpha1.SyncTarget in the indexer.
func (s SyncTargetClusterLister) List(selector labels.Selector) (ret []*workloadv1alpha1.SyncTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*workloadv1alpha1.SyncTarget))
	})
	return ret, err
}

// Cluster returns an object that can list and get workloadv1alpha1.SyncTarget.

func (s SyncTargetClusterLister) Cluster(cluster logicalcluster.Name) *SyncTargetLister {
	return &SyncTargetLister{indexer: s.indexer, cluster: cluster}
}

// SyncTargetLister can list everything inside a cluster or scope by namespace
type SyncTargetLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all workloadv1alpha1.SyncTarget in the indexer.
func (s SyncTargetLister) List(selector labels.Selector) (ret []*workloadv1alpha1.SyncTarget, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*workloadv1alpha1.SyncTarget)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the workloadv1alpha1.SyncTarget from the indexer for a given name.
func (s SyncTargetLister) Get(name string) (*workloadv1alpha1.SyncTarget, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(workloadv1alpha1.Resource("SyncTarget"), name)
	}
	return obj.(*workloadv1alpha1.SyncTarget), nil
}
