//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	apisv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/apis/v1alpha1"
)

// APILifecycleClusterLister can list APILifecycles across all workspaces, or scope down to a APILifecycleLister for one workspace.
// All objects returned here must be treated as read-only.
type APILifecycleClusterLister interface {
	// List lists all APILifecycles in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apisv1alpha1.APILifecycle, err error)
	// Cluster returns a lister that can list and get APILifecycles in one workspace.
	Cluster(clusterName logicalcluster.Name) APILifecycleLister
	APILifecycleClusterListerExpansion
}

type aPILifecycleClusterLister struct {
	indexer cache.Indexer
}

// NewAPILifecycleClusterLister returns a new APILifecycleClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewAPILifecycleClusterLister(indexer cache.Indexer) *aPILifecycleClusterLister {
	return &aPILifecycleClusterLister{indexer: indexer}
}

// List lists all APILifecycles in the indexer across all workspaces.
func (s *aPILifecycleClusterLister) List(selector labels.Selector) (ret []*apisv1alpha1.APILifecycle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*apisv1alpha1.APILifecycle))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get APILifecycles.
func (s *aPILifecycleClusterLister) Cluster(clusterName logicalcluster.Name) APILifecycleLister {
	return &aPILifecycleLister{indexer: s.indexer, clusterName: clusterName}
}

// APILifecycleLister can list all APILifecycles, or get one in particular.
// All objects returned here must be treated as read-only.
type APILifecycleLister interface {
	// List lists all APILifecycles in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apisv1alpha1.APILifecycle, err error)
	// Get retrieves the APILifecycle from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*apisv1alpha1.APILifecycle, error)
	APILifecycleListerExpansion
}

// aPILifecycleLister can list all APILifecycles inside a workspace.
type aPILifecycleLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all APILifecycles in the indexer for a workspace.
func (s *aPILifecycleLister) List(selector labels.Selector) (ret []*apisv1alpha1.APILifecycle, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*apisv1alpha1.APILifecycle))
	})
	return ret, err
}

// Get retrieves the APILifecycle from the indexer for a given workspace and name.
func (s *aPILifecycleLister) Get(name string) (*apisv1alpha1.APILifecycle, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apisv1alpha1.Resource("apilifecycles"), name)
	}
	return obj.(*apisv1alpha1.APILifecycle), nil
}

// NewAPILifecycleLister returns a new APILifecycleLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewAPILifecycleLister(indexer cache.Indexer) *aPILifecycleScopedLister {
	return &aPILifecycleScopedLister{indexer: indexer}
}

// aPILifecycleScopedLister can list all APILifecycles inside a workspace.
type aPILifecycleScopedLister struct {
	indexer cache.Indexer
}

// List lists all APILifecycles in the indexer for a workspace.
func (s *aPILifecycleScopedLister) List(selector labels.Selector) (ret []*apisv1alpha1.APILifecycle, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*apisv1alpha1.APILifecycle))
	})
	return ret, err
}

// Get retrieves the APILifecycle from the indexer for a given workspace and name.
func (s *aPILifecycleScopedLister) Get(name string) (*apisv1alpha1.APILifecycle, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apisv1alpha1.Resource("apilifecycles"), name)
	}
	return obj.(*apisv1alpha1.APILifecycle), nil
}
