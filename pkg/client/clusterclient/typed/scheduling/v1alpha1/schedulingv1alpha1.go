//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	schedulingapiv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/scheduling/v1alpha1"
	schedulingv1alpha1 "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/typed/scheduling/v1alpha1"
	"github.com/kcp-dev/logicalcluster"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/rest"
)

// WrappedSchedulingV1alpha1 wraps the client interface with a
// logical cluster.
type WrappedSchedulingV1alpha1 struct {
	cluster  logicalcluster.Name
	delegate schedulingv1alpha1.SchedulingV1alpha1Interface
}

// New creates a WrappedSchedulingV1alpha1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate schedulingv1alpha1.SchedulingV1alpha1Interface) *WrappedSchedulingV1alpha1 {
	return &WrappedSchedulingV1alpha1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedSchedulingV1alpha1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedSchedulingV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedSchedulingV1alpha1) Locations() schedulingv1alpha1.LocationInterface {
	return &wrappedLocation{
		cluster:  w.cluster,
		delegate: w.delegate.Locations(),
	}
}

type wrappedLocation struct {
	cluster  logicalcluster.Name
	delegate schedulingv1alpha1.LocationInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedLocation. It errors when
// there is a mismatch.
func (w *wrappedLocation) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements LocationInterface.
func (w *wrappedLocation) Get(ctx context.Context, name string, opts metav1.GetOptions) (*schedulingapiv1alpha1.Location, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements LocationInterface.
func (w *wrappedLocation) List(ctx context.Context, opts metav1.ListOptions) (*schedulingapiv1alpha1.LocationList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements LocationInterface.
func (w *wrappedLocation) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements LocationInterface.
func (w *wrappedLocation) Create(ctx context.Context, location *schedulingapiv1alpha1.Location, opts metav1.CreateOptions) (*schedulingapiv1alpha1.Location, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, location, opts)
}

// Update implements LocationInterface.
func (w *wrappedLocation) Update(ctx context.Context, location *schedulingapiv1alpha1.Location, opts metav1.UpdateOptions) (*schedulingapiv1alpha1.Location, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, location, opts)
}

// UpdateStatus implements LocationInterface. It was generated because the type contains a Status member.
func (w *wrappedLocation) UpdateStatus(ctx context.Context, location *schedulingapiv1alpha1.Location, opts metav1.UpdateOptions) (*schedulingapiv1alpha1.Location, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, location, opts)
}

// Delete implements LocationInterface.
func (w *wrappedLocation) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements LocationInterface.
func (w *wrappedLocation) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements LocationInterface.
func (w *wrappedLocation) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *schedulingapiv1alpha1.Location, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// WrappedSchedulingV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedSchedulingV1alpha1) Placements() schedulingv1alpha1.PlacementInterface {
	return &wrappedPlacement{
		cluster:  w.cluster,
		delegate: w.delegate.Placements(),
	}
}

type wrappedPlacement struct {
	cluster  logicalcluster.Name
	delegate schedulingv1alpha1.PlacementInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedPlacement. It errors when
// there is a mismatch.
func (w *wrappedPlacement) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements PlacementInterface.
func (w *wrappedPlacement) Get(ctx context.Context, name string, opts metav1.GetOptions) (*schedulingapiv1alpha1.Placement, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements PlacementInterface.
func (w *wrappedPlacement) List(ctx context.Context, opts metav1.ListOptions) (*schedulingapiv1alpha1.PlacementList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements PlacementInterface.
func (w *wrappedPlacement) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements PlacementInterface.
func (w *wrappedPlacement) Create(ctx context.Context, placement *schedulingapiv1alpha1.Placement, opts metav1.CreateOptions) (*schedulingapiv1alpha1.Placement, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, placement, opts)
}

// Update implements PlacementInterface.
func (w *wrappedPlacement) Update(ctx context.Context, placement *schedulingapiv1alpha1.Placement, opts metav1.UpdateOptions) (*schedulingapiv1alpha1.Placement, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, placement, opts)
}

// UpdateStatus implements PlacementInterface. It was generated because the type contains a Status member.
func (w *wrappedPlacement) UpdateStatus(ctx context.Context, placement *schedulingapiv1alpha1.Placement, opts metav1.UpdateOptions) (*schedulingapiv1alpha1.Placement, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, placement, opts)
}

// Delete implements PlacementInterface.
func (w *wrappedPlacement) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements PlacementInterface.
func (w *wrappedPlacement) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements PlacementInterface.
func (w *wrappedPlacement) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *schedulingapiv1alpha1.Placement, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}
