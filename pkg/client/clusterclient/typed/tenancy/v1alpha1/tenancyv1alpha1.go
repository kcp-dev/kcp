//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"fmt"
	kcp "github.com/kcp-dev/apimachinery/pkg/client"
	tenancyapiv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/client/clientset/versioned/typed/tenancy/v1alpha1"
	"github.com/kcp-dev/logicalcluster"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/rest"
)

// WrappedTenancyV1alpha1 wraps the client interface with a
// logical cluster.
type WrappedTenancyV1alpha1 struct {
	cluster  logicalcluster.Name
	delegate tenancyv1alpha1.TenancyV1alpha1Interface
}

// New creates a WrappedTenancyV1alpha1 with the given logical cluster and client interface.
func New(cluster logicalcluster.Name, delegate tenancyv1alpha1.TenancyV1alpha1Interface) *WrappedTenancyV1alpha1 {
	return &WrappedTenancyV1alpha1{cluster: cluster, delegate: delegate}
}

// RESTClient returns the underlying RESTClient.
func (w *WrappedTenancyV1alpha1) RESTClient() rest.Interface {
	return w.delegate.RESTClient()
}

// WrappedTenancyV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedTenancyV1alpha1) ClusterWorkspaces() tenancyv1alpha1.ClusterWorkspaceInterface {
	return &wrappedClusterWorkspace{
		cluster:  w.cluster,
		delegate: w.delegate.ClusterWorkspaces(),
	}
}

type wrappedClusterWorkspace struct {
	cluster  logicalcluster.Name
	delegate tenancyv1alpha1.ClusterWorkspaceInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedClusterWorkspace. It errors when
// there is a mismatch.
func (w *wrappedClusterWorkspace) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Get(ctx context.Context, name string, opts metav1.GetOptions) (*tenancyapiv1alpha1.ClusterWorkspace, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) List(ctx context.Context, opts metav1.ListOptions) (*tenancyapiv1alpha1.ClusterWorkspaceList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Create(ctx context.Context, clusterWorkspace *tenancyapiv1alpha1.ClusterWorkspace, opts metav1.CreateOptions) (*tenancyapiv1alpha1.ClusterWorkspace, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, clusterWorkspace, opts)
}

// Update implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Update(ctx context.Context, clusterWorkspace *tenancyapiv1alpha1.ClusterWorkspace, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspace, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, clusterWorkspace, opts)
}

// UpdateStatus implements ClusterWorkspaceInterface. It was generated because the type contains a Status member.
func (w *wrappedClusterWorkspace) UpdateStatus(ctx context.Context, clusterWorkspace *tenancyapiv1alpha1.ClusterWorkspace, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspace, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, clusterWorkspace, opts)
}

// Delete implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ClusterWorkspaceInterface.
func (w *wrappedClusterWorkspace) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *tenancyapiv1alpha1.ClusterWorkspace, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// WrappedTenancyV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedTenancyV1alpha1) ClusterWorkspaceShards() tenancyv1alpha1.ClusterWorkspaceShardInterface {
	return &wrappedClusterWorkspaceShard{
		cluster:  w.cluster,
		delegate: w.delegate.ClusterWorkspaceShards(),
	}
}

type wrappedClusterWorkspaceShard struct {
	cluster  logicalcluster.Name
	delegate tenancyv1alpha1.ClusterWorkspaceShardInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedClusterWorkspaceShard. It errors when
// there is a mismatch.
func (w *wrappedClusterWorkspaceShard) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Get(ctx context.Context, name string, opts metav1.GetOptions) (*tenancyapiv1alpha1.ClusterWorkspaceShard, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) List(ctx context.Context, opts metav1.ListOptions) (*tenancyapiv1alpha1.ClusterWorkspaceShardList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Create(ctx context.Context, clusterWorkspaceShard *tenancyapiv1alpha1.ClusterWorkspaceShard, opts metav1.CreateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceShard, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, clusterWorkspaceShard, opts)
}

// Update implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Update(ctx context.Context, clusterWorkspaceShard *tenancyapiv1alpha1.ClusterWorkspaceShard, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceShard, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, clusterWorkspaceShard, opts)
}

// UpdateStatus implements ClusterWorkspaceShardInterface. It was generated because the type contains a Status member.
func (w *wrappedClusterWorkspaceShard) UpdateStatus(ctx context.Context, clusterWorkspaceShard *tenancyapiv1alpha1.ClusterWorkspaceShard, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceShard, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, clusterWorkspaceShard, opts)
}

// Delete implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ClusterWorkspaceShardInterface.
func (w *wrappedClusterWorkspaceShard) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *tenancyapiv1alpha1.ClusterWorkspaceShard, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}

// WrappedTenancyV1alpha1 contains the wrapped logical cluster and interface.
func (w *WrappedTenancyV1alpha1) ClusterWorkspaceTypes() tenancyv1alpha1.ClusterWorkspaceTypeInterface {
	return &wrappedClusterWorkspaceType{
		cluster:  w.cluster,
		delegate: w.delegate.ClusterWorkspaceTypes(),
	}
}

type wrappedClusterWorkspaceType struct {
	cluster  logicalcluster.Name
	delegate tenancyv1alpha1.ClusterWorkspaceTypeInterface
}

// checkCluster retrieves the logical cluster name from the given context and checks
// if it is the same as the one passed while creating a wrappedClusterWorkspaceType. It errors when
// there is a mismatch.
func (w *wrappedClusterWorkspaceType) checkCluster(ctx context.Context) (context.Context, error) {
	ctxCluster, ok := kcp.ClusterFromContext(ctx)
	if !ok {
		return kcp.WithCluster(ctx, w.cluster), nil
	} else if ctxCluster != w.cluster {
		return ctx, fmt.Errorf("cluster mismatch: context=%q, client=%q", ctxCluster, w.cluster)
	}
	return ctx, nil
}

// Get implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Get(ctx context.Context, name string, opts metav1.GetOptions) (*tenancyapiv1alpha1.ClusterWorkspaceType, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Get(ctx, name, opts)
}

// List implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) List(ctx context.Context, opts metav1.ListOptions) (*tenancyapiv1alpha1.ClusterWorkspaceTypeList, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.List(ctx, opts)
}

// Watch implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Watch(ctx, opts)
}

// Create implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Create(ctx context.Context, clusterWorkspaceType *tenancyapiv1alpha1.ClusterWorkspaceType, opts metav1.CreateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceType, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Create(ctx, clusterWorkspaceType, opts)
}

// Update implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Update(ctx context.Context, clusterWorkspaceType *tenancyapiv1alpha1.ClusterWorkspaceType, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceType, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Update(ctx, clusterWorkspaceType, opts)
}

// UpdateStatus implements ClusterWorkspaceTypeInterface. It was generated because the type contains a Status member.
func (w *wrappedClusterWorkspaceType) UpdateStatus(ctx context.Context, clusterWorkspaceType *tenancyapiv1alpha1.ClusterWorkspaceType, opts metav1.UpdateOptions) (*tenancyapiv1alpha1.ClusterWorkspaceType, error) {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.UpdateStatus(ctx, clusterWorkspaceType, opts)
}

// Delete implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.Delete(ctx, name, opts)
}

// DeleteCollection implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listopts metav1.ListOptions) error {
	ctx, err := w.checkCluster(ctx)
	if err != nil {
		return err
	}
	return w.delegate.DeleteCollection(ctx, opts, listopts)
}

// Patch implements ClusterWorkspaceTypeInterface.
func (w *wrappedClusterWorkspaceType) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *tenancyapiv1alpha1.ClusterWorkspaceType, err error) {
	ctx, err = w.checkCluster(ctx)
	if err != nil {
		return nil, err
	}
	return w.delegate.Patch(ctx, name, pt, data, opts, subresources...)
}
