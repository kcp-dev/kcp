//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	targetsv1alpha1 "github.com/kcp-dev/kcp/contrib/mounts-vw/apis/targets/v1alpha1"
)

// TargetVClusterClusterLister can list TargetVClusters across all workspaces, or scope down to a TargetVClusterLister for one workspace.
// All objects returned here must be treated as read-only.
type TargetVClusterClusterLister interface {
	// List lists all TargetVClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*targetsv1alpha1.TargetVCluster, err error)
	// Cluster returns a lister that can list and get TargetVClusters in one workspace.
	Cluster(clusterName logicalcluster.Name) TargetVClusterLister
	TargetVClusterClusterListerExpansion
}

type targetVClusterClusterLister struct {
	indexer cache.Indexer
}

// NewTargetVClusterClusterLister returns a new TargetVClusterClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewTargetVClusterClusterLister(indexer cache.Indexer) *targetVClusterClusterLister {
	return &targetVClusterClusterLister{indexer: indexer}
}

// List lists all TargetVClusters in the indexer across all workspaces.
func (s *targetVClusterClusterLister) List(selector labels.Selector) (ret []*targetsv1alpha1.TargetVCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*targetsv1alpha1.TargetVCluster))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get TargetVClusters.
func (s *targetVClusterClusterLister) Cluster(clusterName logicalcluster.Name) TargetVClusterLister {
	return &targetVClusterLister{indexer: s.indexer, clusterName: clusterName}
}

// TargetVClusterLister can list all TargetVClusters, or get one in particular.
// All objects returned here must be treated as read-only.
type TargetVClusterLister interface {
	// List lists all TargetVClusters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*targetsv1alpha1.TargetVCluster, err error)
	// Get retrieves the TargetVCluster from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*targetsv1alpha1.TargetVCluster, error)
	TargetVClusterListerExpansion
}

// targetVClusterLister can list all TargetVClusters inside a workspace.
type targetVClusterLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all TargetVClusters in the indexer for a workspace.
func (s *targetVClusterLister) List(selector labels.Selector) (ret []*targetsv1alpha1.TargetVCluster, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*targetsv1alpha1.TargetVCluster))
	})
	return ret, err
}

// Get retrieves the TargetVCluster from the indexer for a given workspace and name.
func (s *targetVClusterLister) Get(name string) (*targetsv1alpha1.TargetVCluster, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(targetsv1alpha1.Resource("targetvclusters"), name)
	}
	return obj.(*targetsv1alpha1.TargetVCluster), nil
}

// NewTargetVClusterLister returns a new TargetVClusterLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewTargetVClusterLister(indexer cache.Indexer) *targetVClusterScopedLister {
	return &targetVClusterScopedLister{indexer: indexer}
}

// targetVClusterScopedLister can list all TargetVClusters inside a workspace.
type targetVClusterScopedLister struct {
	indexer cache.Indexer
}

// List lists all TargetVClusters in the indexer for a workspace.
func (s *targetVClusterScopedLister) List(selector labels.Selector) (ret []*targetsv1alpha1.TargetVCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*targetsv1alpha1.TargetVCluster))
	})
	return ret, err
}

// Get retrieves the TargetVCluster from the indexer for a given workspace and name.
func (s *targetVClusterScopedLister) Get(name string) (*targetsv1alpha1.TargetVCluster, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(targetsv1alpha1.Resource("targetvclusters"), name)
	}
	return obj.(*targetsv1alpha1.TargetVCluster), nil
}
