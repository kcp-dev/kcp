//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	proxyv1alpha1 "github.com/kcp-dev/kcp/contrib/mounts-vw/apis/proxy/v1alpha1"
)

// TargetKubeClusterClusterLister can list TargetKubeClusters across all workspaces, or scope down to a TargetKubeClusterLister for one workspace.
// All objects returned here must be treated as read-only.
type TargetKubeClusterClusterLister interface {
	// List lists all TargetKubeClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.TargetKubeCluster, err error)
	// Cluster returns a lister that can list and get TargetKubeClusters in one workspace.
	Cluster(clusterName logicalcluster.Name) TargetKubeClusterLister
	TargetKubeClusterClusterListerExpansion
}

type targetKubeClusterClusterLister struct {
	indexer cache.Indexer
}

// NewTargetKubeClusterClusterLister returns a new TargetKubeClusterClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewTargetKubeClusterClusterLister(indexer cache.Indexer) *targetKubeClusterClusterLister {
	return &targetKubeClusterClusterLister{indexer: indexer}
}

// List lists all TargetKubeClusters in the indexer across all workspaces.
func (s *targetKubeClusterClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.TargetKubeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*proxyv1alpha1.TargetKubeCluster))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get TargetKubeClusters.
func (s *targetKubeClusterClusterLister) Cluster(clusterName logicalcluster.Name) TargetKubeClusterLister {
	return &targetKubeClusterLister{indexer: s.indexer, clusterName: clusterName}
}

// TargetKubeClusterLister can list all TargetKubeClusters, or get one in particular.
// All objects returned here must be treated as read-only.
type TargetKubeClusterLister interface {
	// List lists all TargetKubeClusters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.TargetKubeCluster, err error)
	// Get retrieves the TargetKubeCluster from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*proxyv1alpha1.TargetKubeCluster, error)
	TargetKubeClusterListerExpansion
}

// targetKubeClusterLister can list all TargetKubeClusters inside a workspace.
type targetKubeClusterLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all TargetKubeClusters in the indexer for a workspace.
func (s *targetKubeClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.TargetKubeCluster, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.TargetKubeCluster))
	})
	return ret, err
}

// Get retrieves the TargetKubeCluster from the indexer for a given workspace and name.
func (s *targetKubeClusterLister) Get(name string) (*proxyv1alpha1.TargetKubeCluster, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("targetkubeclusters"), name)
	}
	return obj.(*proxyv1alpha1.TargetKubeCluster), nil
}

// NewTargetKubeClusterLister returns a new TargetKubeClusterLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewTargetKubeClusterLister(indexer cache.Indexer) *targetKubeClusterScopedLister {
	return &targetKubeClusterScopedLister{indexer: indexer}
}

// targetKubeClusterScopedLister can list all TargetKubeClusters inside a workspace.
type targetKubeClusterScopedLister struct {
	indexer cache.Indexer
}

// List lists all TargetKubeClusters in the indexer for a workspace.
func (s *targetKubeClusterScopedLister) List(selector labels.Selector) (ret []*proxyv1alpha1.TargetKubeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.TargetKubeCluster))
	})
	return ret, err
}

// Get retrieves the TargetKubeCluster from the indexer for a given workspace and name.
func (s *targetKubeClusterScopedLister) Get(name string) (*proxyv1alpha1.TargetKubeCluster, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("targetkubeclusters"), name)
	}
	return obj.(*proxyv1alpha1.TargetKubeCluster), nil
}
