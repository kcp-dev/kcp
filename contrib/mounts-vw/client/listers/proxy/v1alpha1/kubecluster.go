//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	proxyv1alpha1 "github.com/kcp-dev/kcp/contrib/mounts-vw/apis/proxy/v1alpha1"
)

// KubeClusterClusterLister can list KubeClusters across all workspaces, or scope down to a KubeClusterLister for one workspace.
// All objects returned here must be treated as read-only.
type KubeClusterClusterLister interface {
	// List lists all KubeClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.KubeCluster, err error)
	// Cluster returns a lister that can list and get KubeClusters in one workspace.
	Cluster(clusterName logicalcluster.Name) KubeClusterLister
	KubeClusterClusterListerExpansion
}

type kubeClusterClusterLister struct {
	indexer cache.Indexer
}

// NewKubeClusterClusterLister returns a new KubeClusterClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewKubeClusterClusterLister(indexer cache.Indexer) *kubeClusterClusterLister {
	return &kubeClusterClusterLister{indexer: indexer}
}

// List lists all KubeClusters in the indexer across all workspaces.
func (s *kubeClusterClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.KubeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*proxyv1alpha1.KubeCluster))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get KubeClusters.
func (s *kubeClusterClusterLister) Cluster(clusterName logicalcluster.Name) KubeClusterLister {
	return &kubeClusterLister{indexer: s.indexer, clusterName: clusterName}
}

// KubeClusterLister can list all KubeClusters, or get one in particular.
// All objects returned here must be treated as read-only.
type KubeClusterLister interface {
	// List lists all KubeClusters in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*proxyv1alpha1.KubeCluster, err error)
	// Get retrieves the KubeCluster from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*proxyv1alpha1.KubeCluster, error)
	KubeClusterListerExpansion
}

// kubeClusterLister can list all KubeClusters inside a workspace.
type kubeClusterLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all KubeClusters in the indexer for a workspace.
func (s *kubeClusterLister) List(selector labels.Selector) (ret []*proxyv1alpha1.KubeCluster, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.KubeCluster))
	})
	return ret, err
}

// Get retrieves the KubeCluster from the indexer for a given workspace and name.
func (s *kubeClusterLister) Get(name string) (*proxyv1alpha1.KubeCluster, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("kubeclusters"), name)
	}
	return obj.(*proxyv1alpha1.KubeCluster), nil
}

// NewKubeClusterLister returns a new KubeClusterLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewKubeClusterLister(indexer cache.Indexer) *kubeClusterScopedLister {
	return &kubeClusterScopedLister{indexer: indexer}
}

// kubeClusterScopedLister can list all KubeClusters inside a workspace.
type kubeClusterScopedLister struct {
	indexer cache.Indexer
}

// List lists all KubeClusters in the indexer for a workspace.
func (s *kubeClusterScopedLister) List(selector labels.Selector) (ret []*proxyv1alpha1.KubeCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*proxyv1alpha1.KubeCluster))
	})
	return ret, err
}

// Get retrieves the KubeCluster from the indexer for a given workspace and name.
func (s *kubeClusterScopedLister) Get(name string) (*proxyv1alpha1.KubeCluster, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(proxyv1alpha1.Resource("kubeclusters"), name)
	}
	return obj.(*proxyv1alpha1.KubeCluster), nil
}
