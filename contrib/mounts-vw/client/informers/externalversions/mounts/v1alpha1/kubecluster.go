//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	mountsv1alpha1 "github.com/kcp-dev/kcp/contrib/mounts-vw/apis/mounts/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/contrib/mounts-vw/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/contrib/mounts-vw/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/contrib/mounts-vw/client/informers/externalversions/internalinterfaces"
	mountsv1alpha1listers "github.com/kcp-dev/kcp/contrib/mounts-vw/client/listers/mounts/v1alpha1"
)

// KubeClusterClusterInformer provides access to a shared informer and lister for
// KubeClusters.
type KubeClusterClusterInformer interface {
	Cluster(logicalcluster.Name) KubeClusterInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() mountsv1alpha1listers.KubeClusterClusterLister
}

type kubeClusterClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewKubeClusterClusterInformer constructs a new informer for KubeCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKubeClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredKubeClusterClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredKubeClusterClusterInformer constructs a new informer for KubeCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKubeClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().KubeClusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().KubeClusters().Watch(context.TODO(), options)
			},
		},
		&mountsv1alpha1.KubeCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *kubeClusterClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredKubeClusterClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *kubeClusterClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&mountsv1alpha1.KubeCluster{}, f.defaultInformer)
}

func (f *kubeClusterClusterInformer) Lister() mountsv1alpha1listers.KubeClusterClusterLister {
	return mountsv1alpha1listers.NewKubeClusterClusterLister(f.Informer().GetIndexer())
}

// KubeClusterInformer provides access to a shared informer and lister for
// KubeClusters.
type KubeClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() mountsv1alpha1listers.KubeClusterLister
}

func (f *kubeClusterClusterInformer) Cluster(clusterName logicalcluster.Name) KubeClusterInformer {
	return &kubeClusterInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type kubeClusterInformer struct {
	informer cache.SharedIndexInformer
	lister   mountsv1alpha1listers.KubeClusterLister
}

func (f *kubeClusterInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *kubeClusterInformer) Lister() mountsv1alpha1listers.KubeClusterLister {
	return f.lister
}

type kubeClusterScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *kubeClusterScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&mountsv1alpha1.KubeCluster{}, f.defaultInformer)
}

func (f *kubeClusterScopedInformer) Lister() mountsv1alpha1listers.KubeClusterLister {
	return mountsv1alpha1listers.NewKubeClusterLister(f.Informer().GetIndexer())
}

// NewKubeClusterInformer constructs a new informer for KubeCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewKubeClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredKubeClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredKubeClusterInformer constructs a new informer for KubeCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredKubeClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().KubeClusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().KubeClusters().Watch(context.TODO(), options)
			},
		},
		&mountsv1alpha1.KubeCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *kubeClusterScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredKubeClusterInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
