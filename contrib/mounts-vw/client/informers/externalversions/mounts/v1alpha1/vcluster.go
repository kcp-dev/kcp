//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	mountsv1alpha1 "github.com/kcp-dev/kcp/contrib/mounts-vw/apis/mounts/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/contrib/mounts-vw/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/contrib/mounts-vw/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/contrib/mounts-vw/client/informers/externalversions/internalinterfaces"
	mountsv1alpha1listers "github.com/kcp-dev/kcp/contrib/mounts-vw/client/listers/mounts/v1alpha1"
)

// VClusterClusterInformer provides access to a shared informer and lister for
// VClusters.
type VClusterClusterInformer interface {
	Cluster(logicalcluster.Name) VClusterInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() mountsv1alpha1listers.VClusterClusterLister
}

type vClusterClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewVClusterClusterInformer constructs a new informer for VCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVClusterClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVClusterClusterInformer constructs a new informer for VCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVClusterClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().VClusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().VClusters().Watch(context.TODO(), options)
			},
		},
		&mountsv1alpha1.VCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *vClusterClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredVClusterClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *vClusterClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&mountsv1alpha1.VCluster{}, f.defaultInformer)
}

func (f *vClusterClusterInformer) Lister() mountsv1alpha1listers.VClusterClusterLister {
	return mountsv1alpha1listers.NewVClusterClusterLister(f.Informer().GetIndexer())
}

// VClusterInformer provides access to a shared informer and lister for
// VClusters.
type VClusterInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() mountsv1alpha1listers.VClusterLister
}

func (f *vClusterClusterInformer) Cluster(clusterName logicalcluster.Name) VClusterInformer {
	return &vClusterInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type vClusterInformer struct {
	informer cache.SharedIndexInformer
	lister   mountsv1alpha1listers.VClusterLister
}

func (f *vClusterInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *vClusterInformer) Lister() mountsv1alpha1listers.VClusterLister {
	return f.lister
}

type vClusterScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *vClusterScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&mountsv1alpha1.VCluster{}, f.defaultInformer)
}

func (f *vClusterScopedInformer) Lister() mountsv1alpha1listers.VClusterLister {
	return mountsv1alpha1listers.NewVClusterLister(f.Informer().GetIndexer())
}

// NewVClusterInformer constructs a new informer for VCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredVClusterInformer constructs a new informer for VCluster type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVClusterInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().VClusters().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MountsV1alpha1().VClusters().Watch(context.TODO(), options)
			},
		},
		&mountsv1alpha1.VCluster{},
		resyncPeriod,
		indexers,
	)
}

func (f *vClusterScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVClusterInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
