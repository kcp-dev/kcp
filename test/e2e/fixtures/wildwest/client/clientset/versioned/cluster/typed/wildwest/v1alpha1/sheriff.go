/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by cluster-client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	kcpwildwestv1alpha1 "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/apis/wildwest/v1alpha1"
	kcpv1alpha1 "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/client/clientset/versioned/typed/wildwest/v1alpha1"
	"github.com/kcp-dev/logicalcluster/v3"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
)

// SherifvesClusterGetter has a method to return a SheriffClusterInterface.
// A group's cluster client should implement this interface.
type SherifvesClusterGetter interface {
	Sherifves() SheriffClusterInterface
}

// SheriffClusterInterface can operate on Sherifves across all clusters,
// or scope down to one cluster and return a kcpv1alpha1.SheriffInterface.
type SheriffClusterInterface interface {
	Cluster(logicalcluster.Path) kcpv1alpha1.SheriffInterface
	List(ctx context.Context, opts v1.ListOptions) (*kcpwildwestv1alpha1.SheriffList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	SheriffClusterExpansion
}

type sherifvesClusterInterface struct {
	clientCache kcpclient.Cache[*kcpv1alpha1.WildwestV1alpha1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *sherifvesClusterInterface) Cluster(clusterPath logicalcluster.Path) kcpv1alpha1.SheriffInterface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return c.clientCache.ClusterOrDie(clusterPath).Sherifves()
}

// List returns the entire collection of all Sherifves across all clusters.
func (c *sherifvesClusterInterface) List(ctx context.Context, opts v1.ListOptions) (*kcpwildwestv1alpha1.SheriffList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Sherifves().List(ctx, opts)
}

// Watch begins to watch all Sherifves across all clusters.
func (c *sherifvesClusterInterface) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).Sherifves().Watch(ctx, opts)
}
