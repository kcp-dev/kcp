//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	wildwestv1alpha1 "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/apis/wildwest/v1alpha1"
	scopedclientset "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/client/clientset/versioned"
	clientset "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/client/clientset/versioned/cluster"
	"github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/client/informers/externalversions/internalinterfaces"
	wildwestv1alpha1listers "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/client/listers/wildwest/v1alpha1"
)

// SheriffClusterInformer provides access to a shared informer and lister for
// Sherifves.
type SheriffClusterInformer interface {
	Cluster(logicalcluster.Name) SheriffInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() wildwestv1alpha1listers.SheriffClusterLister
}

type sheriffClusterInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSheriffClusterInformer constructs a new informer for Sheriff type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSheriffClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSheriffClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSheriffClusterInformer constructs a new informer for Sheriff type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSheriffClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WildwestV1alpha1().Sherifves().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WildwestV1alpha1().Sherifves().Watch(context.TODO(), options)
			},
		},
		&wildwestv1alpha1.Sheriff{},
		resyncPeriod,
		indexers,
	)
}

func (f *sheriffClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredSheriffClusterInformer(client, resyncPeriod, cache.Indexers{
		kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
	},
		f.tweakListOptions,
	)
}

func (f *sheriffClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&wildwestv1alpha1.Sheriff{}, f.defaultInformer)
}

func (f *sheriffClusterInformer) Lister() wildwestv1alpha1listers.SheriffClusterLister {
	return wildwestv1alpha1listers.NewSheriffClusterLister(f.Informer().GetIndexer())
}

// SheriffInformer provides access to a shared informer and lister for
// Sherifves.
type SheriffInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() wildwestv1alpha1listers.SheriffLister
}

func (f *sheriffClusterInformer) Cluster(clusterName logicalcluster.Name) SheriffInformer {
	return &sheriffInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type sheriffInformer struct {
	informer cache.SharedIndexInformer
	lister   wildwestv1alpha1listers.SheriffLister
}

func (f *sheriffInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *sheriffInformer) Lister() wildwestv1alpha1listers.SheriffLister {
	return f.lister
}

type sheriffScopedInformer struct {
	factory          internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

func (f *sheriffScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&wildwestv1alpha1.Sheriff{}, f.defaultInformer)
}

func (f *sheriffScopedInformer) Lister() wildwestv1alpha1listers.SheriffLister {
	return wildwestv1alpha1listers.NewSheriffLister(f.Informer().GetIndexer())
}

// NewSheriffInformer constructs a new informer for Sheriff type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSheriffInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSheriffInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSheriffInformer constructs a new informer for Sheriff type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSheriffInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WildwestV1alpha1().Sherifves().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.WildwestV1alpha1().Sherifves().Watch(context.TODO(), options)
			},
		},
		&wildwestv1alpha1.Sheriff{},
		resyncPeriod,
		indexers,
	)
}

func (f *sheriffScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSheriffInformer(client, resyncPeriod, cache.Indexers{}, f.tweakListOptions)
}
