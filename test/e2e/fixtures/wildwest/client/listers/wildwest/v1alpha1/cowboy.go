//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v2"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	wildwestv1alpha1 "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/apis/wildwest/v1alpha1"
)

// CowboyClusterLister can list everything or scope by workspace
type CowboyClusterLister struct {
	indexer cache.Indexer
}

// NewCowboyClusterLister returns a new CowboyClusterLister.
func NewCowboyClusterLister(indexer cache.Indexer) *CowboyClusterLister {
	return &CowboyClusterLister{indexer: indexer}
}

// List lists all wildwestv1alpha1.Cowboy in the indexer.
func (s CowboyClusterLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Cowboy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*wildwestv1alpha1.Cowboy))
	})
	return ret, err
}

// Cluster returns an object that can list and get wildwestv1alpha1.Cowboy.

func (s CowboyClusterLister) Cluster(cluster logicalcluster.Name) *CowboyLister {
	return &CowboyLister{indexer: s.indexer, cluster: cluster}
}

// CowboyLister can list everything inside a cluster or scope by namespace
type CowboyLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all wildwestv1alpha1.Cowboy in the indexer.
func (s CowboyLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Cowboy, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*wildwestv1alpha1.Cowboy)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Cowboys returns an object that can list and get wildwestv1alpha1.Cowboy.
func (s CowboyLister) Cowboys(namespace string) *CowboyNamespaceLister {
	return &CowboyNamespaceLister{indexer: s.indexer, cluster: s.cluster, namespace: namespace}
}

// CowboyNamespaceLister helps list and get wildwestv1alpha1.Cowboy.
// All objects returned here must be treated as read-only.
type CowboyNamespaceLister struct {
	indexer   cache.Indexer
	cluster   logicalcluster.Name
	namespace string
}

// List lists all wildwestv1alpha1.Cowboy in the indexer for a given namespace.
func (s CowboyNamespaceLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Cowboy, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterAndNamespaceIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*wildwestv1alpha1.Cowboy)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}
	return ret, err
}

// Get retrieves the wildwestv1alpha1.Cowboy from the indexer for a given namespace and name.
func (s CowboyNamespaceLister) Get(name string) (*wildwestv1alpha1.Cowboy, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), s.namespace, name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(wildwestv1alpha1.Resource("Cowboy"), name)
	}
	return obj.(*wildwestv1alpha1.Cowboy), nil
}
