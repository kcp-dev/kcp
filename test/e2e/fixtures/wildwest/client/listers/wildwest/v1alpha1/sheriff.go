//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	wildwestv1alpha1 "github.com/kcp-dev/kcp/test/e2e/fixtures/wildwest/apis/wildwest/v1alpha1"
)

// SheriffClusterLister can list Sherifves across all workspaces, or scope down to a SheriffLister for one workspace.
// All objects returned here must be treated as read-only.
type SheriffClusterLister interface {
	// List lists all Sherifves in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*wildwestv1alpha1.Sheriff, err error)
	// Cluster returns a lister that can list and get Sherifves in one workspace.
	Cluster(clusterName logicalcluster.Name) SheriffLister
	SheriffClusterListerExpansion
}

type sheriffClusterLister struct {
	indexer cache.Indexer
}

// NewSheriffClusterLister returns a new SheriffClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewSheriffClusterLister(indexer cache.Indexer) *sheriffClusterLister {
	return &sheriffClusterLister{indexer: indexer}
}

// List lists all Sherifves in the indexer across all workspaces.
func (s *sheriffClusterLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Sheriff, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*wildwestv1alpha1.Sheriff))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get Sherifves.
func (s *sheriffClusterLister) Cluster(clusterName logicalcluster.Name) SheriffLister {
	return &sheriffLister{indexer: s.indexer, clusterName: clusterName}
}

// SheriffLister can list all Sherifves, or get one in particular.
// All objects returned here must be treated as read-only.
type SheriffLister interface {
	// List lists all Sherifves in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*wildwestv1alpha1.Sheriff, err error)
	// Get retrieves the Sheriff from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*wildwestv1alpha1.Sheriff, error)
	SheriffListerExpansion
}

// sheriffLister can list all Sherifves inside a workspace.
type sheriffLister struct {
	indexer     cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all Sherifves in the indexer for a workspace.
func (s *sheriffLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Sheriff, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*wildwestv1alpha1.Sheriff))
	})
	return ret, err
}

// Get retrieves the Sheriff from the indexer for a given workspace and name.
func (s *sheriffLister) Get(name string) (*wildwestv1alpha1.Sheriff, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(wildwestv1alpha1.Resource("sherifves"), name)
	}
	return obj.(*wildwestv1alpha1.Sheriff), nil
}

// NewSheriffLister returns a new SheriffLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewSheriffLister(indexer cache.Indexer) *sheriffScopedLister {
	return &sheriffScopedLister{indexer: indexer}
}

// sheriffScopedLister can list all Sherifves inside a workspace.
type sheriffScopedLister struct {
	indexer cache.Indexer
}

// List lists all Sherifves in the indexer for a workspace.
func (s *sheriffScopedLister) List(selector labels.Selector) (ret []*wildwestv1alpha1.Sheriff, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*wildwestv1alpha1.Sheriff))
	})
	return ret, err
}

// Get retrieves the Sheriff from the indexer for a given workspace and name.
func (s *sheriffScopedLister) Get(name string) (*wildwestv1alpha1.Sheriff, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(wildwestv1alpha1.Resource("sherifves"), name)
	}
	return obj.(*wildwestv1alpha1.Sheriff), nil
}
