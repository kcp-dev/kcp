apiVersion: apis.kcp.dev/v1alpha1
kind: APIResourceSchema
metadata:
  annotations:
    internal.sharding.kcp.dev/replicate: "true"
  creationTimestamp: null
  name: v220909-c255fd13.placements.scheduling.kcp.dev
spec:
  group: scheduling.kcp.dev
  names:
    categories:
    - kcp
    kind: Placement
    listKind: PlacementList
    plural: placements
    singular: placement
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      description: "Placement defines a selection rule to choose ONE location for
        MULTIPLE namespaces in a workspace. \n placement is in Pending state initially.
        When a location is selected by the placement, the placement turns to Unbound
        state. In Pending or Unbound state, the selection rule can be updated to select
        another location. When the a namespace is annotated by another controller
        or user with the key of \"scheduling.kcp.dev/placement\", the namespace will
        pick one placement, and this placement is transferred to Bound state. Any
        update to spec of the placement is ignored in Bound state and reflected in
        the conditions. The placement will turn back to Unbound state when no namespace
        uses this placement any more."
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            locationResource:
              description: locationResource is the group-version-resource of the instances
                that are subject to the locations to select.
              properties:
                group:
                  description: group is the name of an API group.
                  enum:
                  - workload.kcp.dev
                  pattern: ^(|[a-z0-9]([-a-z0-9]*[a-z0-9](\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)?)$
                  type: string
                resource:
                  description: resource is the name of the resource.
                  enum:
                  - synctargets
                  pattern: ^[a-z][-a-z0-9]*[a-z0-9]$
                  type: string
                version:
                  description: version is the version of the API.
                  enum:
                  - v1alpha1
                  pattern: ^[a-z][-a-z0-9]*[a-z0-9]$
                  type: string
              required:
              - resource
              - version
              type: object
            locationSelectors:
              description: locationSelectors represents a slice of label selector
                to select a location, these label selectors are logically ORed.
              items:
                description: A label selector is a label query over a set of resources.
                  The result of matchLabels and matchExpressions are ANDed. An empty
                  label selector matches all objects. A null label selector matches
                  no objects.
                properties:
                  matchExpressions:
                    description: matchExpressions is a list of label selector requirements.
                      The requirements are ANDed.
                    items:
                      description: A label selector requirement is a selector that
                        contains values, a key, and an operator that relates the key
                        and values.
                      properties:
                        key:
                          description: key is the label key that the selector applies
                            to.
                          type: string
                        operator:
                          description: operator represents a key's relationship to
                            a set of values. Valid operators are In, NotIn, Exists
                            and DoesNotExist.
                          type: string
                        values:
                          description: values is an array of string values. If the
                            operator is In or NotIn, the values array must be non-empty.
                            If the operator is Exists or DoesNotExist, the values
                            array must be empty. This array is replaced during a strategic
                            merge patch.
                          items:
                            type: string
                          type: array
                      required:
                      - key
                      - operator
                      type: object
                    type: array
                  matchLabels:
                    additionalProperties:
                      type: string
                    description: matchLabels is a map of {key,value} pairs. A single
                      {key,value} in the matchLabels map is equivalent to an element
                      of matchExpressions, whose key field is "key", the operator
                      is "In", and the values array contains only "value". The requirements
                      are ANDed.
                    type: object
                type: object
              type: array
            locationWorkspace:
              description: locationWorkspace is an absolute reference to a workspace
                for the location. If it is not set, the workspace of APIBinding will
                be used.
              pattern: ^root(:[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
              type: string
            namespaceSelector:
              description: namespaceSelector is a label selector to select ns. It
                match all ns by default, but can be specified to a certain set of
                ns.
              properties:
                matchExpressions:
                  description: matchExpressions is a list of label selector requirements.
                    The requirements are ANDed.
                  items:
                    description: A label selector requirement is a selector that contains
                      values, a key, and an operator that relates the key and values.
                    properties:
                      key:
                        description: key is the label key that the selector applies
                          to.
                        type: string
                      operator:
                        description: operator represents a key's relationship to a
                          set of values. Valid operators are In, NotIn, Exists and
                          DoesNotExist.
                        type: string
                      values:
                        description: values is an array of string values. If the operator
                          is In or NotIn, the values array must be non-empty. If the
                          operator is Exists or DoesNotExist, the values array must
                          be empty. This array is replaced during a strategic merge
                          patch.
                        items:
                          type: string
                        type: array
                    required:
                    - key
                    - operator
                    type: object
                  type: array
                matchLabels:
                  additionalProperties:
                    type: string
                  description: matchLabels is a map of {key,value} pairs. A single
                    {key,value} in the matchLabels map is equivalent to an element
                    of matchExpressions, whose key field is "key", the operator is
                    "In", and the values array contains only "value". The requirements
                    are ANDed.
                  type: object
              type: object
          required:
          - locationResource
          type: object
        status:
          properties:
            conditions:
              description: Current processing state of the Placement.
              items:
                description: Condition defines an observation of a object operational
                  state.
                properties:
                  lastTransitionTime:
                    description: Last time the condition transitioned from one status
                      to another. This should be when the underlying condition changed.
                      If that is not known, then using the time when the API field
                      changed is acceptable.
                    format: date-time
                    type: string
                  message:
                    description: A human readable message indicating details about
                      the transition. This field may be empty.
                    type: string
                  reason:
                    description: The reason for the condition's last transition in
                      CamelCase. The specific API may choose whether or not this field
                      is considered a guaranteed API. This field may not be empty.
                    type: string
                  severity:
                    description: Severity provides an explicit classification of Reason
                      code, so the users or machines can immediately understand the
                      current situation and act accordingly. The Severity field MUST
                      be set only when Status=False.
                    type: string
                  status:
                    description: Status of the condition, one of True, False, Unknown.
                    type: string
                  type:
                    description: Type of condition in CamelCase or in foo.example.com/CamelCase.
                      Many .condition.type values are consistent across resources
                      like Available, but because arbitrary conditions can be useful
                      (see .node.status.conditions), the ability to deconflict is
                      important.
                    type: string
                required:
                - lastTransitionTime
                - status
                - type
                type: object
              type: array
            phase:
              default: Pending
              description: phase is the current phase of the placement
              enum:
              - Pending
              - Bound
              - Unbound
              type: string
            selectedLocation:
              description: selectedLocation is the location that a picked by this
                placement.
              properties:
                locationName:
                  description: Name of the Location.
                  type: string
                path:
                  description: path is an absolute reference to a workspace, e.g.
                    root:org:ws. The workspace must be some ancestor or a child of
                    some ancestor.
                  pattern: ^root(:[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                  type: string
              required:
              - locationName
              - path
              type: object
          type: object
      type: object
    served: true
    storage: true
    subresources:
      status: {}
